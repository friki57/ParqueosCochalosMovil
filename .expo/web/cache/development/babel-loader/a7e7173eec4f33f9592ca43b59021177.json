{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isAndroid = isAndroid;\nexports.existenceChange = existenceChange;\nexports.isFunction = isFunction;\nexports.isNumber = isNumber;\nexports.isUndefined = isUndefined;\nexports.isString = isString;\nexports.isBoolean = isBoolean;\nexports.isPrimitive = isPrimitive;\nexports.runNativeCommand = runNativeCommand;\nexports.cloneReactChildrenWithProps = cloneReactChildrenWithProps;\nexports.resolveImagePath = resolveImagePath;\nexports.getIOSModuleName = getIOSModuleName;\nexports.toJSONString = toJSONString;\nexports.viewPropTypes = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _resolveAssetSource = _interopRequireDefault(require(\"react-native/Libraries/Image/resolveAssetSource\"));\n\nfunction getAndroidManagerInstance(module) {\n  var haveViewManagerConfig = _reactNative.NativeModules.UIManager && _reactNative.NativeModules.UIManager.getViewManagerConfig;\n  return haveViewManagerConfig ? _reactNative.NativeModules.UIManager.getViewManagerConfig(module) : _reactNative.NativeModules.UIManager[module];\n}\n\nfunction getIosManagerInstance(module) {\n  return _reactNative.NativeModules[getIOSModuleName(module)];\n}\n\nvar viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.props;\nexports.viewPropTypes = viewPropTypes;\n\nfunction isAndroid() {\n  return _reactNative.Platform.OS === 'android';\n}\n\nfunction existenceChange(cur, next) {\n  if (!cur && !next) {\n    return false;\n  }\n\n  return !cur && next || cur && !next;\n}\n\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isNumber(num) {\n  return typeof num === 'number' && !Number.isNaN(num);\n}\n\nfunction isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\nfunction isString(str) {\n  return typeof str === 'string';\n}\n\nfunction isBoolean(bool) {\n  return typeof bool === 'boolean';\n}\n\nfunction isPrimitive(value) {\n  return isString(value) || isNumber(value) || isBoolean(value);\n}\n\nfunction runNativeCommand(module, name, nativeRef) {\n  var args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var handle = (0, _reactNative.findNodeHandle)(nativeRef);\n\n  if (!handle) {\n    throw new Error(\"Could not find handle for native ref \" + module + \".\" + name);\n  }\n\n  var managerInstance = isAndroid() ? getAndroidManagerInstance(module) : getIosManagerInstance(module);\n\n  if (!managerInstance) {\n    throw new Error(\"Could not find \" + module);\n  }\n\n  if (isAndroid()) {\n    return _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(handle, managerInstance.Commands[name], args);\n  }\n\n  return managerInstance[name].apply(managerInstance, [handle].concat((0, _toConsumableArray2.default)(args)));\n}\n\nfunction cloneReactChildrenWithProps(children) {\n  var propsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!children) return null;\n  var foundChildren = null;\n\n  if (!Array.isArray(children)) {\n    foundChildren = [children];\n  } else {\n    foundChildren = children;\n  }\n\n  var filteredChildren = foundChildren.filter(function (child) {\n    return !!child;\n  });\n  return _react.default.Children.map(filteredChildren, function (child) {\n    return _react.default.cloneElement(child, propsToAdd);\n  });\n}\n\nfunction resolveImagePath(imageRef) {\n  var res = (0, _resolveAssetSource.default)(imageRef);\n  return res.uri;\n}\n\nfunction getIOSModuleName(moduleName) {\n  if (moduleName.startsWith('RCT')) {\n    return moduleName.substring(3);\n  }\n\n  return moduleName;\n}\n\nfunction toJSONString() {\n  var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return JSON.stringify(json);\n}","map":{"version":3,"sources":["/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/utils/index.js"],"names":["getAndroidManagerInstance","module","haveViewManagerConfig","NativeModules","UIManager","getViewManagerConfig","getIosManagerInstance","getIOSModuleName","viewPropTypes","ViewPropTypes","View","props","isAndroid","Platform","OS","existenceChange","cur","next","isFunction","fn","isNumber","num","Number","isNaN","isUndefined","obj","isString","str","isBoolean","bool","isPrimitive","value","runNativeCommand","name","nativeRef","args","handle","Error","managerInstance","dispatchViewManagerCommand","Commands","cloneReactChildrenWithProps","children","propsToAdd","foundChildren","Array","isArray","filteredChildren","filter","child","React","Children","map","cloneElement","resolveImagePath","imageRef","res","uri","moduleName","startsWith","substring","toJSONString","json","JSON","stringify"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ViewPropTypes,\n  View,\n  NativeModules,\n  findNodeHandle,\n  Platform,\n} from 'react-native';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nfunction getAndroidManagerInstance(module) {\n  const haveViewManagerConfig =\n    NativeModules.UIManager && NativeModules.UIManager.getViewManagerConfig;\n  return haveViewManagerConfig\n    ? NativeModules.UIManager.getViewManagerConfig(module)\n    : NativeModules.UIManager[module];\n}\n\nfunction getIosManagerInstance(module) {\n  return NativeModules[getIOSModuleName(module)];\n}\n\nexport const viewPropTypes = ViewPropTypes || View.props;\n\nexport function isAndroid() {\n  return Platform.OS === 'android';\n}\n\nexport function existenceChange(cur, next) {\n  if (!cur && !next) {\n    return false;\n  }\n  return (!cur && next) || (cur && !next);\n}\n\nexport function isFunction(fn) {\n  return typeof fn === 'function';\n}\n\nexport function isNumber(num) {\n  return typeof num === 'number' && !Number.isNaN(num);\n}\n\nexport function isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\nexport function isString(str) {\n  return typeof str === 'string';\n}\n\nexport function isBoolean(bool) {\n  return typeof bool === 'boolean';\n}\n\nexport function isPrimitive(value) {\n  return isString(value) || isNumber(value) || isBoolean(value);\n}\n\nexport function runNativeCommand(module, name, nativeRef, args = []) {\n  const handle = findNodeHandle(nativeRef);\n  if (!handle) {\n    throw new Error(`Could not find handle for native ref ${module}.${name}`);\n  }\n\n  const managerInstance = isAndroid()\n    ? getAndroidManagerInstance(module)\n    : getIosManagerInstance(module);\n\n  if (!managerInstance) {\n    throw new Error(`Could not find ${module}`);\n  }\n\n  if (isAndroid()) {\n    return NativeModules.UIManager.dispatchViewManagerCommand(\n      handle,\n      managerInstance.Commands[name],\n      args,\n    );\n  }\n\n  return managerInstance[name](handle, ...args);\n}\n\nexport function cloneReactChildrenWithProps(children, propsToAdd = {}) {\n  if (!children) return null;\n\n  let foundChildren = null;\n\n  if (!Array.isArray(children)) {\n    foundChildren = [children];\n  } else {\n    foundChildren = children;\n  }\n\n  const filteredChildren = foundChildren.filter(child => !!child); // filter out falsy children, since some can be null\n  return React.Children.map(filteredChildren, child =>\n    React.cloneElement(child, propsToAdd),\n  );\n}\n\nexport function resolveImagePath(imageRef) {\n  const res = resolveAssetSource(imageRef);\n  return res.uri;\n}\n\nexport function getIOSModuleName(moduleName) {\n  if (moduleName.startsWith('RCT')) {\n    return moduleName.substring(3);\n  }\n  return moduleName;\n}\n\nexport function toJSONString(json = '') {\n  return JSON.stringify(json);\n}\n"]},"metadata":{},"sourceType":"script"}
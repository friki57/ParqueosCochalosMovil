{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar callbackIncrement = 0;\n\nvar NativeBridgeComponent = function NativeBridgeComponent(B) {\n  return function (_B) {\n    (0, _inherits2.default)(_class, _B);\n\n    var _super = _createSuper(_class);\n\n    function _class(props, nativeModuleName) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, _class);\n      _this = _super.call(this, props);\n      _this._nativeModuleName = nativeModuleName;\n      _this._onAndroidCallback = _this._onAndroidCallback.bind((0, _assertThisInitialized2.default)(_this));\n      _this._callbackMap = new Map();\n      _this._preRefMapMethodQueue = [];\n      return _this;\n    }\n\n    (0, _createClass2.default)(_class, [{\n      key: \"_addAddAndroidCallback\",\n      value: function _addAddAndroidCallback(id, callback) {\n        this._callbackMap.set(id, callback);\n      }\n    }, {\n      key: \"_removeAndroidCallback\",\n      value: function _removeAndroidCallback(id) {\n        this._callbackMap.remove(id);\n      }\n    }, {\n      key: \"_onAndroidCallback\",\n      value: function _onAndroidCallback(e) {\n        var callbackID = e.nativeEvent.type;\n\n        var callback = this._callbackMap.get(callbackID);\n\n        if (!callback) {\n          return;\n        }\n\n        this._callbackMap.delete(callbackID);\n\n        callback.call(null, e.nativeEvent.payload);\n      }\n    }, {\n      key: \"_runPendingNativeCommands\",\n      value: function _runPendingNativeCommands(nativeRef) {\n        var item, res;\n        return _regenerator.default.async(function _runPendingNativeCommands$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!nativeRef) {\n                  _context.next = 10;\n                  break;\n                }\n\n              case 1:\n                if (!(this._preRefMapMethodQueue.length > 0)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                item = this._preRefMapMethodQueue.pop();\n\n                if (!(item && item.method && item.resolver)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 6;\n                return _regenerator.default.awrap(this._runNativeCommand(item.method.name, nativeRef, item.method.args));\n\n              case 6:\n                res = _context.sent;\n                item.resolver(res);\n\n              case 8:\n                _context.next = 1;\n                break;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"_runNativeCommand\",\n      value: function _runNativeCommand(methodName, nativeRef) {\n        var _this2 = this;\n\n        var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n        if (!nativeRef) {\n          return new Promise(function (resolve) {\n            _this2._preRefMapMethodQueue.push({\n              method: {\n                name: methodName,\n                args: args\n              },\n              resolver: resolve\n            });\n          });\n        }\n\n        if ((0, _utils.isAndroid)()) {\n          return new Promise(function (resolve) {\n            callbackIncrement += 1;\n            var callbackID = methodName + \"_\" + callbackIncrement;\n\n            _this2._addAddAndroidCallback(callbackID, resolve);\n\n            args.unshift(callbackID);\n            (0, _utils.runNativeCommand)(_this2._nativeModuleName, methodName, nativeRef, args);\n          });\n        }\n\n        return (0, _utils.runNativeCommand)(this._nativeModuleName, methodName, nativeRef, args);\n      }\n    }]);\n    return _class;\n  }(B);\n};\n\nvar _default = NativeBridgeComponent;\nexports.default = _default;","map":{"version":3,"sources":["/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/components/NativeBridgeComponent.js"],"names":["callbackIncrement","NativeBridgeComponent","B","props","nativeModuleName","_nativeModuleName","_onAndroidCallback","bind","_callbackMap","Map","_preRefMapMethodQueue","id","callback","set","remove","e","callbackID","nativeEvent","type","get","delete","call","payload","nativeRef","length","item","pop","method","resolver","_runNativeCommand","name","args","res","methodName","Promise","resolve","push","_addAddAndroidCallback","unshift"],"mappings":"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","sourcesContent":["import {runNativeCommand, isAndroid} from '../utils';\n\nlet callbackIncrement = 0;\n\nconst NativeBridgeComponent = B =>\n  class extends B {\n    constructor(props, nativeModuleName) {\n      super(props);\n\n      this._nativeModuleName = nativeModuleName;\n      this._onAndroidCallback = this._onAndroidCallback.bind(this);\n      this._callbackMap = new Map();\n      this._preRefMapMethodQueue = [];\n    }\n\n    _addAddAndroidCallback(id, callback) {\n      this._callbackMap.set(id, callback);\n    }\n\n    _removeAndroidCallback(id) {\n      this._callbackMap.remove(id);\n    }\n\n    _onAndroidCallback(e) {\n      const callbackID = e.nativeEvent.type;\n      const callback = this._callbackMap.get(callbackID);\n\n      if (!callback) {\n        return;\n      }\n\n      this._callbackMap.delete(callbackID);\n      callback.call(null, e.nativeEvent.payload);\n    }\n\n    async _runPendingNativeCommands(nativeRef) {\n      if (nativeRef)\n        while (this._preRefMapMethodQueue.length > 0) {\n          const item = this._preRefMapMethodQueue.pop();\n\n          if (item && item.method && item.resolver) {\n            const res = await this._runNativeCommand(\n              item.method.name,\n              nativeRef,\n              item.method.args,\n            );\n            item.resolver(res);\n          }\n        }\n    }\n\n    _runNativeCommand(methodName, nativeRef, args = []) {\n      if (!nativeRef) {\n        return new Promise(resolve => {\n          this._preRefMapMethodQueue.push({\n            method: {name: methodName, args},\n            resolver: resolve,\n          });\n        });\n      }\n\n      if (isAndroid()) {\n        return new Promise(resolve => {\n          callbackIncrement += 1;\n          const callbackID = `${methodName}_${callbackIncrement}`;\n          this._addAddAndroidCallback(callbackID, resolve);\n          args.unshift(callbackID);\n          runNativeCommand(this._nativeModuleName, methodName, nativeRef, args);\n        });\n      }\n      return runNativeCommand(\n        this._nativeModuleName,\n        methodName,\n        nativeRef,\n        args,\n      );\n    }\n  };\n\nexport default NativeBridgeComponent;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makePoint = makePoint;\nexports.makeLineString = makeLineString;\nexports.makeLatLngBounds = makeLatLngBounds;\nexports.makeFeature = makeFeature;\nexports.makeFeatureCollection = makeFeatureCollection;\nexports.addToFeatureCollection = addToFeatureCollection;\nexports.calculateDistance = calculateDistance;\nexports.pointAlongLine = pointAlongLine;\nexports.getOrCalculateVisibleRegion = getOrCalculateVisibleRegion;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _helpers = require(\"@turf/helpers\");\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _along = _interopRequireDefault(require(\"@turf/along\"));\n\nvar _geoViewport = _interopRequireDefault(require(\"@mapbox/geo-viewport\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar VECTOR_TILE_SIZE = 512;\n\nfunction makePoint(coordinates, properties, options) {\n  return (0, _helpers.point)(coordinates, properties, options);\n}\n\nfunction makeLineString(coordinates, properties, options) {\n  return (0, _helpers.lineString)(coordinates, properties, options);\n}\n\nfunction makeLatLngBounds(northEastCoordinates, southWestCoordinates) {\n  return (0, _helpers.featureCollection)([(0, _helpers.point)(northEastCoordinates), (0, _helpers.point)(southWestCoordinates)]);\n}\n\nfunction makeFeature(geometry, properties) {\n  return (0, _helpers.feature)(geometry, properties);\n}\n\nfunction makeFeatureCollection() {\n  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  return (0, _helpers.featureCollection)(features, options);\n}\n\nfunction addToFeatureCollection(newFeatureCollection, newFeature) {\n  return _objectSpread({}, newFeatureCollection, {\n    features: [].concat((0, _toConsumableArray2.default)(newFeatureCollection.features), [newFeature])\n  });\n}\n\nfunction calculateDistance(origin, dest, options) {\n  return (0, _distance.default)(origin, dest, options);\n}\n\nfunction pointAlongLine(newLineString, distAlong, options) {\n  return (0, _along.default)(newLineString, distAlong, options);\n}\n\nfunction getOrCalculateVisibleRegion(coord, zoomLevel, width, height, nativeRegion) {\n  var region = {\n    ne: [0, 0],\n    sw: [0, 0]\n  };\n\n  if (!nativeRegion || !Array.isArray(nativeRegion.visibleBounds)) {\n    var bounds = _geoViewport.default.bounds(coord, zoomLevel, [width, height], VECTOR_TILE_SIZE);\n\n    region.ne = [bounds[3], bounds[2]];\n    region.sw = [bounds[1], bounds[0]];\n  } else {\n    region.ne = nativeRegion.properties.visibleBounds[0];\n    region.sw = nativeRegion.properties.visibleBounds[1];\n  }\n\n  return region;\n}","map":{"version":3,"sources":["/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/utils/geoUtils.js"],"names":["VECTOR_TILE_SIZE","makePoint","coordinates","properties","options","makeLineString","makeLatLngBounds","northEastCoordinates","southWestCoordinates","makeFeature","geometry","makeFeatureCollection","features","addToFeatureCollection","newFeatureCollection","newFeature","calculateDistance","origin","dest","pointAlongLine","newLineString","distAlong","getOrCalculateVisibleRegion","coord","zoomLevel","width","height","nativeRegion","region","ne","sw","Array","isArray","visibleBounds","bounds","geoViewport"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,gBAAgB,GAAG,GAAzB;;AAEO,SAASC,SAAT,CAAmBC,WAAnB,EAAgCC,UAAhC,EAA4CC,OAA5C,EAAqD;AAC1D,SAAO,oBAAMF,WAAN,EAAmBC,UAAnB,EAA+BC,OAA/B,CAAP;AACD;;AAEM,SAASC,cAAT,CAAwBH,WAAxB,EAAqCC,UAArC,EAAiDC,OAAjD,EAA0D;AAC/D,SAAO,yBAAWF,WAAX,EAAwBC,UAAxB,EAAoCC,OAApC,CAAP;AACD;;AAEM,SAASE,gBAAT,CAA0BC,oBAA1B,EAAgDC,oBAAhD,EAAsE;AAC3E,SAAO,gCAAkB,CACvB,oBAAMD,oBAAN,CADuB,EAEvB,oBAAMC,oBAAN,CAFuB,CAAlB,CAAP;AAID;;AAEM,SAASC,WAAT,CAAqBC,QAArB,EAA+BP,UAA/B,EAA2C;AAChD,SAAO,sBAAQO,QAAR,EAAkBP,UAAlB,CAAP;AACD;;AAEM,SAASQ,qBAAT,GAAuD;AAAA,MAAxBC,QAAwB,uEAAb,EAAa;AAAA,MAATR,OAAS;AAC5D,SAAO,gCAAkBQ,QAAlB,EAA4BR,OAA5B,CAAP;AACD;;AAEM,SAASS,sBAAT,CAAgCC,oBAAhC,EAAsDC,UAAtD,EAAkE;AACvE,2BACKD,oBADL;AAEEF,IAAAA,QAAQ,6CAAME,oBAAoB,CAACF,QAA3B,IAAqCG,UAArC;AAFV;AAID;;AAEM,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,IAAnC,EAAyCd,OAAzC,EAAkD;AACvD,SAAO,uBAASa,MAAT,EAAiBC,IAAjB,EAAuBd,OAAvB,CAAP;AACD;;AAEM,SAASe,cAAT,CAAwBC,aAAxB,EAAuCC,SAAvC,EAAkDjB,OAAlD,EAA2D;AAChE,SAAO,oBAAMgB,aAAN,EAAqBC,SAArB,EAAgCjB,OAAhC,CAAP;AACD;;AAEM,SAASkB,2BAAT,CACLC,KADK,EAELC,SAFK,EAGLC,KAHK,EAILC,MAJK,EAKLC,YALK,EAML;AACA,MAAMC,MAAM,GAAG;AACbC,IAAAA,EAAE,EAAE,CAAC,CAAD,EAAI,CAAJ,CADS;AAEbC,IAAAA,EAAE,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFS,GAAf;;AAKA,MAAI,CAACH,YAAD,IAAiB,CAACI,KAAK,CAACC,OAAN,CAAcL,YAAY,CAACM,aAA3B,CAAtB,EAAiE;AAC/D,QAAMC,MAAM,GAAGC,qBAAYD,MAAZ,CACbX,KADa,EAEbC,SAFa,EAGb,CAACC,KAAD,EAAQC,MAAR,CAHa,EAIb1B,gBAJa,CAAf;;AAMA4B,IAAAA,MAAM,CAACC,EAAP,GAAY,CAACK,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAAZ;AACAN,IAAAA,MAAM,CAACE,EAAP,GAAY,CAACI,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAAZ;AACD,GATD,MASO;AACLN,IAAAA,MAAM,CAACC,EAAP,GAAYF,YAAY,CAACxB,UAAb,CAAwB8B,aAAxB,CAAsC,CAAtC,CAAZ;AACAL,IAAAA,MAAM,CAACE,EAAP,GAAYH,YAAY,CAACxB,UAAb,CAAwB8B,aAAxB,CAAsC,CAAtC,CAAZ;AACD;;AAED,SAAOL,MAAP;AACD","sourcesContent":["import {featureCollection, point, feature, lineString} from '@turf/helpers';\nimport distance from '@turf/distance';\nimport along from '@turf/along';\nimport geoViewport from '@mapbox/geo-viewport';\n\nconst VECTOR_TILE_SIZE = 512;\n\nexport function makePoint(coordinates, properties, options) {\n  return point(coordinates, properties, options);\n}\n\nexport function makeLineString(coordinates, properties, options) {\n  return lineString(coordinates, properties, options);\n}\n\nexport function makeLatLngBounds(northEastCoordinates, southWestCoordinates) {\n  return featureCollection([\n    point(northEastCoordinates),\n    point(southWestCoordinates),\n  ]);\n}\n\nexport function makeFeature(geometry, properties) {\n  return feature(geometry, properties);\n}\n\nexport function makeFeatureCollection(features = [], options) {\n  return featureCollection(features, options);\n}\n\nexport function addToFeatureCollection(newFeatureCollection, newFeature) {\n  return {\n    ...newFeatureCollection,\n    features: [...newFeatureCollection.features, newFeature],\n  };\n}\n\nexport function calculateDistance(origin, dest, options) {\n  return distance(origin, dest, options);\n}\n\nexport function pointAlongLine(newLineString, distAlong, options) {\n  return along(newLineString, distAlong, options);\n}\n\nexport function getOrCalculateVisibleRegion(\n  coord,\n  zoomLevel,\n  width,\n  height,\n  nativeRegion,\n) {\n  const region = {\n    ne: [0, 0],\n    sw: [0, 0],\n  };\n\n  if (!nativeRegion || !Array.isArray(nativeRegion.visibleBounds)) {\n    const bounds = geoViewport.bounds(\n      coord,\n      zoomLevel,\n      [width, height],\n      VECTOR_TILE_SIZE,\n    );\n    region.ne = [bounds[3], bounds[2]];\n    region.sw = [bounds[1], bounds[0]];\n  } else {\n    region.ne = nativeRegion.properties.visibleBounds[0];\n    region.sw = nativeRegion.properties.visibleBounds[1];\n  }\n\n  return region;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _index = require(\"./index\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Types = {\n  Array: 'array',\n  Bool: 'boolean',\n  Number: 'number',\n  String: 'string',\n  HashMap: 'hashmap'\n};\n\nvar BridgeValue = function () {\n  function BridgeValue(rawValue) {\n    (0, _classCallCheck2.default)(this, BridgeValue);\n    this.rawValue = rawValue;\n  }\n\n  (0, _createClass2.default)(BridgeValue, [{\n    key: \"toJSON\",\n    value: function toJSON(formatter) {\n      return {\n        type: this.type,\n        value: typeof formatter === 'function' ? formatter(this.value) : this.value\n      };\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      if (Array.isArray(this.rawValue)) {\n        return Types.Array;\n      }\n\n      if ((0, _index.isBoolean)(this.rawValue)) {\n        return Types.Bool;\n      }\n\n      if ((0, _index.isNumber)(this.rawValue)) {\n        return Types.Number;\n      }\n\n      if ((0, _index.isString)(this.rawValue)) {\n        return Types.String;\n      }\n\n      if (this.rawValue && typeof this.rawValue === 'object') {\n        return Types.HashMap;\n      }\n\n      throw new Error(\"[type - \" + this.rawValue + \"] BridgeValue must be a primitive/array/object\");\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      var type = this.type;\n      var value;\n\n      if (type === Types.Array) {\n        value = [];\n\n        for (var _iterator = _createForOfIteratorHelperLoose(this.rawValue), _step; !(_step = _iterator()).done;) {\n          var innerRawValue = _step.value;\n          var bridgeValue = new BridgeValue(innerRawValue);\n          value.push(bridgeValue.toJSON());\n        }\n      } else if (type === Types.HashMap) {\n        value = [];\n        var stringKeys = Object.keys(this.rawValue);\n\n        for (var _i = 0, _stringKeys = stringKeys; _i < _stringKeys.length; _i++) {\n          var stringKey = _stringKeys[_i];\n          value.push([new BridgeValue(stringKey).toJSON(), new BridgeValue(this.rawValue[stringKey]).toJSON()]);\n        }\n      } else if (type === Types.Bool || type === Types.Number || type === Types.String) {\n        value = this.rawValue;\n      } else {\n        throw new Error(\"[value - \" + this.rawValue + \"] BridgeValue must be a primitive/array/object\");\n      }\n\n      return value;\n    }\n  }]);\n  return BridgeValue;\n}();\n\nexports.default = BridgeValue;","map":{"version":3,"sources":["/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/utils/BridgeValue.js"],"names":["Types","Array","Bool","Number","String","HashMap","BridgeValue","rawValue","formatter","type","value","isArray","Error","innerRawValue","bridgeValue","push","toJSON","stringKeys","Object","keys","stringKey"],"mappings":";;;;;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,OADK;AAEZC,EAAAA,IAAI,EAAE,SAFM;AAGZC,EAAAA,MAAM,EAAE,QAHI;AAIZC,EAAAA,MAAM,EAAE,QAJI;AAKZC,EAAAA,OAAO,EAAE;AALG,CAAd;;IAQqBC,W;AACnB,uBAAYC,QAAZ,EAAsB;AAAA;AACpB,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;2BA4DMC,S,EAAW;AAChB,aAAO;AACLC,QAAAA,IAAI,EAAE,KAAKA,IADN;AAELC,QAAAA,KAAK,EACH,OAAOF,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAAC,KAAKE,KAAN,CAA3C,GAA0D,KAAKA;AAH5D,OAAP;AAKD;;;wBAhEU;AACT,UAAIT,KAAK,CAACU,OAAN,CAAc,KAAKJ,QAAnB,CAAJ,EAAkC;AAChC,eAAOP,KAAK,CAACC,KAAb;AACD;;AACD,UAAI,sBAAU,KAAKM,QAAf,CAAJ,EAA8B;AAC5B,eAAOP,KAAK,CAACE,IAAb;AACD;;AACD,UAAI,qBAAS,KAAKK,QAAd,CAAJ,EAA6B;AAC3B,eAAOP,KAAK,CAACG,MAAb;AACD;;AACD,UAAI,qBAAS,KAAKI,QAAd,CAAJ,EAA6B;AAC3B,eAAOP,KAAK,CAACI,MAAb;AACD;;AACD,UAAI,KAAKG,QAAL,IAAiB,OAAO,KAAKA,QAAZ,KAAyB,QAA9C,EAAwD;AACtD,eAAOP,KAAK,CAACK,OAAb;AACD;;AACD,YAAM,IAAIO,KAAJ,cACO,KAAKL,QADZ,oDAAN;AAGD;;;wBAEW;AAAA,UACHE,IADG,GACK,IADL,CACHA,IADG;AAGV,UAAIC,KAAJ;;AAEA,UAAID,IAAI,KAAKT,KAAK,CAACC,KAAnB,EAA0B;AACxBS,QAAAA,KAAK,GAAG,EAAR;;AAEA,6DAA4B,KAAKH,QAAjC,wCAA2C;AAAA,cAAhCM,aAAgC;AACzC,cAAMC,WAAW,GAAG,IAAIR,WAAJ,CAAgBO,aAAhB,CAApB;AACAH,UAAAA,KAAK,CAACK,IAAN,CAAWD,WAAW,CAACE,MAAZ,EAAX;AACD;AACF,OAPD,MAOO,IAAIP,IAAI,KAAKT,KAAK,CAACK,OAAnB,EAA4B;AACjCK,QAAAA,KAAK,GAAG,EAAR;AAEA,YAAMO,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKZ,QAAjB,CAAnB;;AACA,uCAAwBU,UAAxB,iCAAoC;AAA/B,cAAMG,SAAS,kBAAf;AACHV,UAAAA,KAAK,CAACK,IAAN,CAAW,CACT,IAAIT,WAAJ,CAAgBc,SAAhB,EAA2BJ,MAA3B,EADS,EAET,IAAIV,WAAJ,CAAgB,KAAKC,QAAL,CAAca,SAAd,CAAhB,EAA0CJ,MAA1C,EAFS,CAAX;AAID;AACF,OAVM,MAUA,IACLP,IAAI,KAAKT,KAAK,CAACE,IAAf,IACAO,IAAI,KAAKT,KAAK,CAACG,MADf,IAEAM,IAAI,KAAKT,KAAK,CAACI,MAHV,EAIL;AACAM,QAAAA,KAAK,GAAG,KAAKH,QAAb;AACD,OANM,MAMA;AACL,cAAM,IAAIK,KAAJ,eACQ,KAAKL,QADb,oDAAN;AAGD;;AAED,aAAOG,KAAP;AACD","sourcesContent":["import {isBoolean, isNumber, isString} from './index';\n\nconst Types = {\n  Array: 'array',\n  Bool: 'boolean',\n  Number: 'number',\n  String: 'string',\n  HashMap: 'hashmap',\n};\n\nexport default class BridgeValue {\n  constructor(rawValue) {\n    this.rawValue = rawValue;\n  }\n\n  get type() {\n    if (Array.isArray(this.rawValue)) {\n      return Types.Array;\n    }\n    if (isBoolean(this.rawValue)) {\n      return Types.Bool;\n    }\n    if (isNumber(this.rawValue)) {\n      return Types.Number;\n    }\n    if (isString(this.rawValue)) {\n      return Types.String;\n    }\n    if (this.rawValue && typeof this.rawValue === 'object') {\n      return Types.HashMap;\n    }\n    throw new Error(\n      `[type - ${this.rawValue}] BridgeValue must be a primitive/array/object`,\n    );\n  }\n\n  get value() {\n    const {type} = this;\n\n    let value;\n\n    if (type === Types.Array) {\n      value = [];\n\n      for (const innerRawValue of this.rawValue) {\n        const bridgeValue = new BridgeValue(innerRawValue);\n        value.push(bridgeValue.toJSON());\n      }\n    } else if (type === Types.HashMap) {\n      value = [];\n\n      const stringKeys = Object.keys(this.rawValue);\n      for (const stringKey of stringKeys) {\n        value.push([\n          new BridgeValue(stringKey).toJSON(),\n          new BridgeValue(this.rawValue[stringKey]).toJSON(),\n        ]);\n      }\n    } else if (\n      type === Types.Bool ||\n      type === Types.Number ||\n      type === Types.String\n    ) {\n      value = this.rawValue;\n    } else {\n      throw new Error(\n        `[value - ${this.rawValue}] BridgeValue must be a primitive/array/object`,\n      );\n    }\n\n    return value;\n  }\n\n  toJSON(formatter) {\n    return {\n      type: this.type,\n      value:\n        typeof formatter === 'function' ? formatter(this.value) : this.value,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
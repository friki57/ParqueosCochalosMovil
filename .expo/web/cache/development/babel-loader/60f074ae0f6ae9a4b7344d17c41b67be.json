{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.NATIVE_MODULE_NAME = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _utils = require(\"../utils\");\n\nvar _filterUtils = require(\"../utils/filterUtils\");\n\nvar _deprecation = require(\"../utils/deprecation\");\n\nvar _AbstractSource = _interopRequireDefault(require(\"./AbstractSource\"));\n\nvar _NativeBridgeComponent = _interopRequireDefault(require(\"./NativeBridgeComponent\"));\n\nvar _jsxFileName = \"/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/components/VectorSource.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar MapboxGL = _reactNative.NativeModules.MGLModule;\nvar NATIVE_MODULE_NAME = 'RCTMGLVectorSource';\nexports.NATIVE_MODULE_NAME = NATIVE_MODULE_NAME;\n\nvar VectorSource = function (_NativeBridgeComponen) {\n  (0, _inherits2.default)(VectorSource, _NativeBridgeComponen);\n\n  var _super = _createSuper(VectorSource);\n\n  function VectorSource(props) {\n    (0, _classCallCheck2.default)(this, VectorSource);\n    return _super.call(this, props, NATIVE_MODULE_NAME);\n  }\n\n  (0, _createClass2.default)(VectorSource, [{\n    key: \"_setNativeRef\",\n    value: function _setNativeRef(nativeRef) {\n      this._nativeRef = nativeRef;\n      (0, _get2.default)((0, _getPrototypeOf2.default)(VectorSource.prototype), \"_runPendingNativeCommands\", this).call(this, nativeRef);\n    }\n  }, {\n    key: \"features\",\n    value: function features() {\n      var layerIDs,\n          filter,\n          res,\n          _args = arguments;\n      return _regenerator.default.async(function features$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              layerIDs = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];\n              filter = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n              _context.next = 4;\n              return _regenerator.default.awrap(this._runNativeCommand('features', this._nativeRef, [layerIDs, (0, _filterUtils.getFilter)(filter)]));\n\n            case 4:\n              res = _context.sent;\n\n              if (!(0, _utils.isAndroid)()) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", JSON.parse(res.data));\n\n            case 7:\n              return _context.abrupt(\"return\", res.data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onPress\",\n    value: function onPress(event) {\n      var _event$nativeEvent$pa = event.nativeEvent.payload,\n          features = _event$nativeEvent$pa.features,\n          coordinates = _event$nativeEvent$pa.coordinates,\n          point = _event$nativeEvent$pa.point;\n      var newEvent = {\n        features: features,\n        coordinates: coordinates,\n        point: point\n      };\n      newEvent = (0, _deprecation.copyPropertiesAsDeprecated)(event, newEvent, function (key) {\n        console.warn(\"event.\" + key + \" is deprecated on VectorSource#onPress, please use event.features\");\n      }, {\n        nativeEvent: function nativeEvent(origNativeEvent) {\n          return _objectSpread({}, origNativeEvent, {\n            payload: features[0]\n          });\n        }\n      });\n      console.log(\"+++ newEvent.features\", newEvent.features);\n      this.props.onPress(newEvent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var props = {\n        id: this.props.id,\n        url: this.props.url,\n        tileUrlTemplates: this.props.tileUrlTemplates,\n        minZoomLevel: this.props.minZoomLevel,\n        maxZoomLevel: this.props.maxZoomLevel,\n        tms: this.props.tms,\n        attribution: this.props.attribution,\n        hitbox: this.props.hitbox,\n        hasPressListener: (0, _utils.isFunction)(this.props.onPress),\n        onMapboxVectorSourcePress: this.onPress.bind(this),\n        onPress: undefined,\n        ref: function ref(nativeRef) {\n          return _this._setNativeRef(nativeRef);\n        },\n        onAndroidCallback: (0, _utils.isAndroid)() ? this._onAndroidCallback : undefined\n      };\n      return _react.default.createElement(RCTMGLVectorSource, (0, _extends2.default)({\n        ref: \"nativeSource\"\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 7\n        }\n      }), (0, _utils.cloneReactChildrenWithProps)(this.props.children, {\n        sourceID: this.props.id\n      }));\n    }\n  }]);\n  return VectorSource;\n}((0, _NativeBridgeComponent.default)(_AbstractSource.default));\n\nVectorSource.propTypes = _objectSpread({}, _utils.viewPropTypes, {\n  id: _propTypes.default.string,\n  url: _propTypes.default.string,\n  tileUrlTemplates: _propTypes.default.arrayOf(_propTypes.default.string),\n  minZoomLevel: _propTypes.default.number,\n  maxZoomLevel: _propTypes.default.number,\n  tms: _propTypes.default.bool,\n  attribution: _propTypes.default.string,\n  onPress: _propTypes.default.func,\n  hitbox: _propTypes.default.shape({\n    width: _propTypes.default.number.isRequired,\n    height: _propTypes.default.number.isRequired\n  })\n});\nVectorSource.defaultProps = {\n  id: MapboxGL.StyleSource.DefaultSourceID\n};\nvar RCTMGLVectorSource = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME, VectorSource, {\n  nativeOnly: {\n    hasPressListener: true,\n    onMapboxVectorSourcePress: true\n  }\n});\nvar _default = VectorSource;\nexports.default = _default;","map":{"version":3,"sources":["/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/components/VectorSource.js"],"names":["MapboxGL","NativeModules","MGLModule","NATIVE_MODULE_NAME","VectorSource","props","nativeRef","_nativeRef","layerIDs","filter","_runNativeCommand","res","JSON","parse","data","event","nativeEvent","payload","features","coordinates","point","newEvent","key","console","warn","origNativeEvent","log","onPress","id","url","tileUrlTemplates","minZoomLevel","maxZoomLevel","tms","attribution","hitbox","hasPressListener","onMapboxVectorSourcePress","bind","undefined","ref","_setNativeRef","onAndroidCallback","_onAndroidCallback","children","sourceID","AbstractSource","propTypes","viewPropTypes","PropTypes","string","arrayOf","number","bool","func","shape","width","isRequired","height","defaultProps","StyleSource","DefaultSourceID","RCTMGLVectorSource","nativeOnly"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {NativeModules, requireNativeComponent} from 'react-native';\n\nimport {\n  cloneReactChildrenWithProps,\n  viewPropTypes,\n  isFunction,\n  isAndroid,\n} from '../utils';\nimport {getFilter} from '../utils/filterUtils';\n\nimport {copyPropertiesAsDeprecated} from '../utils/deprecation';\n\nimport AbstractSource from './AbstractSource';\nimport NativeBridgeComponent from './NativeBridgeComponent';\n\nconst MapboxGL = NativeModules.MGLModule;\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLVectorSource';\n\n/**\n * VectorSource is a map content source that supplies tiled vector data in Mapbox Vector Tile format to be shown on the map.\n * The location of and metadata about the tiles are defined either by an option dictionary or by an external file that conforms to the TileJSON specification.\n */\nclass VectorSource extends NativeBridgeComponent(AbstractSource) {\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * A string that uniquely identifies the source.\n     */\n    id: PropTypes.string,\n\n    /**\n     * A URL to a TileJSON configuration file describing the source’s contents and other metadata.\n     */\n    url: PropTypes.string,\n\n    /**\n     * An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.\n     * Example: https://example.com/vector-tiles/{z}/{x}/{y}.pbf\n     */\n    tileUrlTemplates: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.\n     * The value should be between 0 and 22, inclusive, and less than\n     * maxZoomLevel, if specified. The default value for this option is 0.\n     */\n    minZoomLevel: PropTypes.number,\n\n    /**\n     * An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.\n     * The value should be between 0 and 22, inclusive, and less than\n     * minZoomLevel, if specified. The default value for this option is 22.\n     */\n    maxZoomLevel: PropTypes.number,\n\n    /**\n     * Influences the y direction of the tile coordinates. (tms inverts y axis)\n     */\n    tms: PropTypes.bool,\n\n    /**\n     * An HTML or literal text string defining the buttons to be displayed in an action sheet when the\n     * source is part of a map view’s style and the map view’s attribution button is pressed.\n     */\n    attribution: PropTypes.string,\n\n    /**\n     * Source press listener, gets called when a user presses one of the children layers only\n     * if that layer has a higher z-index than another source layers\n     * \n     * @param {Object} event\n     * @param {Object[]} event.features - the geojson features that have hit by the press (might be multiple)\n     * @param {Object} event.coordinates - the coordinates of the click\n     * @param {Object} event.point - the point of the click\n     */\n    onPress: PropTypes.func,\n\n    /**\n     * Overrides the default touch hitbox(44x44 pixels) for the source layers\n     */\n    hitbox: PropTypes.shape({\n      width: PropTypes.number.isRequired,\n      height: PropTypes.number.isRequired,\n    }),\n  };\n\n  static defaultProps = {\n    id: MapboxGL.StyleSource.DefaultSourceID,\n  };\n\n  constructor(props) {\n    super(props, NATIVE_MODULE_NAME);\n  }\n\n  _setNativeRef(nativeRef) {\n    this._nativeRef = nativeRef;\n    super._runPendingNativeCommands(nativeRef);\n  }\n\n  /**\n   * Returns all features that match the query parameters regardless of whether or not the feature is\n   * currently rendered on the map. The domain of the query includes all currently-loaded vector tiles\n   * and GeoJSON source tiles. This function does not check tiles outside of the visible viewport.\n   *\n   * @example\n   * vectorSource.features(['id1', 'id2'])\n   *\n   * @param  {Array=} layerIDs - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.\n   * @param  {Array=} filter - an optional filter statement to filter the returned Features.\n   * @return {FeatureCollection}\n   */\n  async features(layerIDs = [], filter = []) {\n    const res = await this._runNativeCommand('features', this._nativeRef, [\n      layerIDs,\n      getFilter(filter),\n    ]);\n\n    if (isAndroid()) {\n      return JSON.parse(res.data);\n    }\n\n    return res.data;\n  }\n\n  onPress(event) {\n    const {\n      nativeEvent: {\n        payload: {features, coordinates, point},\n      },\n    } = event;\n    let newEvent = {\n      features,\n      coordinates,\n      point,\n    };\n    newEvent = copyPropertiesAsDeprecated(\n      event,\n      newEvent,\n      key => {\n        console.warn(\n          `event.${key} is deprecated on VectorSource#onPress, please use event.features`,\n        );\n      },\n      {\n        nativeEvent: origNativeEvent => ({\n          ...origNativeEvent,\n          payload: features[0],\n        }),\n      },\n    );\n    console.log(\"+++ newEvent.features\", newEvent.features);\n    this.props.onPress(newEvent);\n  }\n\n  render() {\n    const props = {\n      id: this.props.id,\n      url: this.props.url,\n      tileUrlTemplates: this.props.tileUrlTemplates,\n      minZoomLevel: this.props.minZoomLevel,\n      maxZoomLevel: this.props.maxZoomLevel,\n      tms: this.props.tms,\n      attribution: this.props.attribution,\n      hitbox: this.props.hitbox,\n      hasPressListener: isFunction(this.props.onPress),\n      onMapboxVectorSourcePress: this.onPress.bind(this),\n      onPress: undefined,\n      ref: nativeRef => this._setNativeRef(nativeRef),\n      onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined,\n    };\n    return (\n      <RCTMGLVectorSource ref=\"nativeSource\" {...props}>\n        {cloneReactChildrenWithProps(this.props.children, {\n          sourceID: this.props.id,\n        })}\n      </RCTMGLVectorSource>\n    );\n  }\n}\n\nconst RCTMGLVectorSource = requireNativeComponent(\n  NATIVE_MODULE_NAME,\n  VectorSource,\n  {\n    nativeOnly: {\n      hasPressListener: true,\n      onMapboxVectorSourcePress: true,\n    },\n  },\n);\n\nexport default VectorSource;\n"]},"metadata":{},"sourceType":"script"}
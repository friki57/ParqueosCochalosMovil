{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _SnapshotOptions = _interopRequireDefault(require(\"./SnapshotOptions\"));\n\nvar MapboxGLSnapshotManger = _reactNative.NativeModules.MGLSnapshotModule;\n\nvar SnapshotManager = function () {\n  function SnapshotManager() {\n    (0, _classCallCheck2.default)(this, SnapshotManager);\n  }\n\n  (0, _createClass2.default)(SnapshotManager, [{\n    key: \"takeSnap\",\n    value: function takeSnap() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var snapshotOptions = new _SnapshotOptions.default(options);\n      return new Promise(function _callee(resolve, reject) {\n        var uri;\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _regenerator.default.awrap(MapboxGLSnapshotManger.takeSnap(snapshotOptions));\n\n              case 3:\n                uri = _context.sent;\n                resolve(uri);\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                reject(_context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[0, 7]], Promise);\n      });\n    }\n  }]);\n  return SnapshotManager;\n}();\n\nvar snapshotManager = new SnapshotManager();\nvar _default = snapshotManager;\nexports.default = _default;","map":{"version":3,"sources":["/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/modules/snapshot/snapshotManager.js"],"names":["MapboxGLSnapshotManger","NativeModules","MGLSnapshotModule","SnapshotManager","options","snapshotOptions","SnapshotOptions","Promise","resolve","reject","takeSnap","uri","snapshotManager"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAEA,IAAMA,sBAAsB,GAAGC,2BAAcC,iBAA7C;;IAOMC,e;;;;;;;+BAyCmB;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AACrB,UAAMC,eAAe,GAAG,IAAIC,wBAAJ,CAAoBF,OAApB,CAAxB;AAEA,aAAO,IAAIG,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAEGT,sBAAsB,CAACU,QAAvB,CAAgCL,eAAhC,CAFH;;AAAA;AAETM,gBAAAA,GAFS;AAGfH,gBAAAA,OAAO,CAACG,GAAD,CAAP;AAHe;AAAA;;AAAA;AAAA;AAAA;AAKfF,gBAAAA,MAAM,aAAN;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAZ,CAAP;AAQD;;;;;AAGH,IAAMG,eAAe,GAAG,IAAIT,eAAJ,EAAxB;eACeS,e","sourcesContent":["import {NativeModules} from 'react-native';\n\nimport SnapshotOptions from './SnapshotOptions';\n\nconst MapboxGLSnapshotManger = NativeModules.MGLSnapshotModule;\n\n/**\n * The snapshotManager generates static raster images of the map.\n * Each snapshot image depicts a portion of a map defined by an SnapshotOptions object you provide.\n * The snapshotter generates the snapshot asynchronous.\n */\nclass SnapshotManager {\n  /**\n   * Takes a snapshot of the base map using the provided Snapshot options. NOTE pitch, heading, zoomLevel only works when centerCoordinate is set!\n   *\n   * @example\n   *\n   * // creates a temp file png of base map\n   * const uri = await MapboxGL.snapshotManager.takeSnap({\n   *   centerCoordinate: [-74.126410, 40.797968],\n   *   width: width,\n   *   height: height,\n   *   zoomLevel: 12,\n   *   pitch: 30,\n   *   heading: 20,\n   *   styleURL: MapboxGL.StyleURL.Dark,\n   *   writeToDisk: true, // Create a temporary file\n   * });\n   *\n   * // creates base64 png of base map without logo\n   * const uri = await MapboxGL.snapshotManager.takeSnap({\n   *   centerCoordinate: [-74.126410, 40.797968],\n   *   width: width,\n   *   height: height,\n   *   zoomLevel: 12,\n   *   pitch: 30,\n   *   heading: 20,\n   *   styleURL: MapboxGL.StyleURL.Dark,\n   *   withLogo: false, // Disable Mapbox logo (Android only)\n   * });\n   *\n   * // creates snapshot with bounds\n   * const uri = await MapboxGL.snapshotManager.takeSnap({\n   *   bounds: [[-74.126410, 40.797968], [-74.143727, 40.772177]],\n   *   width: width,\n   *   height: height,\n   *   styleURL: MapboxGL.StyleURL.Dark,\n   * });\n   *\n   * @param  {SnapshotOptions}  options Snapshot options for create a static image of the base map\n   * @return {Promise}\n   */\n  takeSnap(options = {}) {\n    const snapshotOptions = new SnapshotOptions(options);\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        const uri = await MapboxGLSnapshotManger.takeSnap(snapshotOptions);\n        resolve(uri);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n}\n\nconst snapshotManager = new SnapshotManager();\nexport default snapshotManager;\n"]},"metadata":{},"sourceType":"script"}
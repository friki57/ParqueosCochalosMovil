{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.NATIVE_MODULE_NAME = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _utils = require(\"../utils\");\n\nvar _deprecation = require(\"../utils/deprecation\");\n\nvar _AbstractSource2 = _interopRequireDefault(require(\"./AbstractSource\"));\n\nvar _jsxFileName = \"/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/components/ShapeSource.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar MapboxGL = _reactNative.NativeModules.MGLModule;\nvar NATIVE_MODULE_NAME = 'RCTMGLShapeSource';\nexports.NATIVE_MODULE_NAME = NATIVE_MODULE_NAME;\n\nvar ShapeSource = function (_AbstractSource) {\n  (0, _inherits2.default)(ShapeSource, _AbstractSource);\n\n  var _super = _createSuper(ShapeSource);\n\n  function ShapeSource() {\n    (0, _classCallCheck2.default)(this, ShapeSource);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(ShapeSource, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      var shallowProps = (0, _extends2.default)({}, props);\n\n      if (shallowProps.shape && typeof shallowProps !== 'string') {\n        shallowProps.shape = JSON.stringify(shallowProps.shape);\n      }\n\n      (0, _get2.default)((0, _getPrototypeOf2.default)(ShapeSource.prototype), \"setNativeProps\", this).call(this, shallowProps);\n    }\n  }, {\n    key: \"_getShape\",\n    value: function _getShape() {\n      if (!this.props.shape) {\n        return;\n      }\n\n      return (0, _utils.toJSONString)(this.props.shape);\n    }\n  }, {\n    key: \"onPress\",\n    value: function onPress(event) {\n      var _event$nativeEvent$pa = event.nativeEvent.payload,\n          features = _event$nativeEvent$pa.features,\n          coordinates = _event$nativeEvent$pa.coordinates,\n          point = _event$nativeEvent$pa.point;\n      var newEvent = {\n        features: features,\n        coordinates: coordinates,\n        point: point\n      };\n      newEvent = (0, _deprecation.copyPropertiesAsDeprecated)(event, newEvent, function (key) {\n        console.warn(\"event.\" + key + \" is deprecated on ShapeSource#onPress, please use event.features\");\n      }, {\n        nativeEvent: function nativeEvent(origNativeEvent) {\n          return _objectSpread({}, origNativeEvent, {\n            payload: features[0]\n          });\n        }\n      });\n      this.props.onPress(newEvent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = {\n        id: this.props.id,\n        url: this.props.url,\n        shape: this._getShape(),\n        hitbox: this.props.hitbox,\n        hasPressListener: (0, _utils.isFunction)(this.props.onPress),\n        onMapboxShapeSourcePress: this.onPress.bind(this),\n        cluster: this.props.cluster ? 1 : 0,\n        clusterRadius: this.props.clusterRadius,\n        clusterMaxZoomLevel: this.props.clusterMaxZoomLevel,\n        maxZoomLevel: this.props.maxZoomLevel,\n        buffer: this.props.buffer,\n        tolerance: this.props.tolerance,\n        onPress: undefined\n      };\n      return _react.default.createElement(RCTMGLShapeSource, (0, _extends2.default)({\n        ref: \"nativeSource\"\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 7\n        }\n      }), (0, _utils.cloneReactChildrenWithProps)(this.props.children, {\n        sourceID: this.props.id\n      }));\n    }\n  }]);\n  return ShapeSource;\n}(_AbstractSource2.default);\n\nShapeSource.NATIVE_ASSETS_KEY = 'assets';\nShapeSource.propTypes = _objectSpread({}, _utils.viewPropTypes, {\n  id: _propTypes.default.string,\n  url: _propTypes.default.string,\n  shape: _propTypes.default.object,\n  cluster: _propTypes.default.bool,\n  clusterRadius: _propTypes.default.number,\n  clusterMaxZoomLevel: _propTypes.default.number,\n  maxZoomLevel: _propTypes.default.number,\n  buffer: _propTypes.default.number,\n  tolerance: _propTypes.default.number,\n  onPress: _propTypes.default.func,\n  hitbox: _propTypes.default.shape({\n    width: _propTypes.default.number.isRequired,\n    height: _propTypes.default.number.isRequired\n  })\n});\nShapeSource.defaultProps = {\n  id: MapboxGL.StyleSource.DefaultSourceID\n};\nvar RCTMGLShapeSource = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME, ShapeSource, {\n  nativeOnly: {\n    hasPressListener: true,\n    onMapboxShapeSourcePress: true\n  }\n});\nvar _default = ShapeSource;\nexports.default = _default;","map":{"version":3,"sources":["/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/components/ShapeSource.js"],"names":["MapboxGL","NativeModules","MGLModule","NATIVE_MODULE_NAME","ShapeSource","props","shallowProps","shape","JSON","stringify","event","nativeEvent","payload","features","coordinates","point","newEvent","key","console","warn","origNativeEvent","onPress","id","url","_getShape","hitbox","hasPressListener","onMapboxShapeSourcePress","bind","cluster","clusterRadius","clusterMaxZoomLevel","maxZoomLevel","buffer","tolerance","undefined","children","sourceID","AbstractSource","NATIVE_ASSETS_KEY","propTypes","viewPropTypes","PropTypes","string","object","bool","number","func","width","isRequired","height","defaultProps","StyleSource","DefaultSourceID","RCTMGLShapeSource","nativeOnly"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {NativeModules, requireNativeComponent} from 'react-native';\n\nimport {\n  toJSONString,\n  cloneReactChildrenWithProps,\n  viewPropTypes,\n  isFunction,\n} from '../utils';\nimport {copyPropertiesAsDeprecated} from '../utils/deprecation';\n\nimport AbstractSource from './AbstractSource';\n\nconst MapboxGL = NativeModules.MGLModule;\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLShapeSource';\n\n/**\n * ShapeSource is a map content source that supplies vector shapes to be shown on the map.\n * The shape may be a url or a GeoJSON object\n */\nclass ShapeSource extends AbstractSource {\n  static NATIVE_ASSETS_KEY = 'assets';\n\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * A string that uniquely identifies the source.\n     */\n    id: PropTypes.string,\n\n    /**\n     * An HTTP(S) URL, absolute file URL, or local file URL relative to the current application’s resource bundle.\n     */\n    url: PropTypes.string,\n\n    /**\n     * The contents of the source. A shape can represent a GeoJSON geometry, a feature, or a feature colllection.\n     */\n    shape: PropTypes.object,\n\n    /**\n     * Enables clustering on the source for point shapes.\n     */\n    cluster: PropTypes.bool,\n\n    /**\n     * Specifies the radius of each cluster if clustering is enabled.\n     * A value of 512 produces a radius equal to the width of a tile.\n     * The default value is 50.\n     */\n    clusterRadius: PropTypes.number,\n\n    /**\n     * Specifies the maximum zoom level at which to cluster points if clustering is enabled.\n     * Defaults to one zoom level less than the value of maxZoomLevel so that, at the maximum zoom level,\n     * the shapes are not clustered.\n     */\n    clusterMaxZoomLevel: PropTypes.number,\n\n    /**\n     * Specifies the maximum zoom level at which to create vector tiles.\n     * A greater value produces greater detail at high zoom levels.\n     * The default value is 18.\n     */\n    maxZoomLevel: PropTypes.number,\n\n    /**\n     * Specifies the size of the tile buffer on each side.\n     * A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself.\n     * Larger values produce fewer rendering artifacts near tile edges and slower performance.\n     * The default value is 128.\n     */\n    buffer: PropTypes.number,\n\n    /**\n     * Specifies the Douglas-Peucker simplification tolerance.\n     * A greater value produces simpler geometries and improves performance.\n     * The default value is 0.375.\n     */\n    tolerance: PropTypes.number,\n\n    /**\n     * Source press listener, gets called when a user presses one of the children layers only\n     * if that layer has a higher z-index than another source layers\n     *\n     * @param {Object} event\n     * @param {Object[]} event.features - the geojson features that have hit by the press (might be multiple)\n     * @param {Object} event.coordinates - the coordinates of the click\n     * @param {Object} event.point - the point of the click\n     * @return void\n     */\n    onPress: PropTypes.func,\n\n    /**\n     * Overrides the default touch hitbox(44x44 pixels) for the source layers\n     */\n    hitbox: PropTypes.shape({\n      width: PropTypes.number.isRequired,\n      height: PropTypes.number.isRequired,\n    }),\n  };\n\n  static defaultProps = {\n    id: MapboxGL.StyleSource.DefaultSourceID,\n  };\n\n  setNativeProps(props) {\n    const shallowProps = Object.assign({}, props);\n\n    // Adds support for Animated\n    if (shallowProps.shape && typeof shallowProps !== 'string') {\n      shallowProps.shape = JSON.stringify(shallowProps.shape);\n    }\n\n    super.setNativeProps(shallowProps);\n  }\n\n  _getShape() {\n    if (!this.props.shape) {\n      return;\n    }\n    return toJSONString(this.props.shape);\n  }\n\n  onPress(event) {\n    const {\n      nativeEvent: {\n        payload: {features, coordinates, point},\n      },\n    } = event;\n    let newEvent = {\n      features,\n      coordinates,\n      point,\n    };\n    newEvent = copyPropertiesAsDeprecated(\n      event,\n      newEvent,\n      key => {\n        console.warn(\n          `event.${key} is deprecated on ShapeSource#onPress, please use event.features`,\n        );\n      },\n      {\n        nativeEvent: origNativeEvent => ({\n          ...origNativeEvent,\n          payload: features[0],\n        }),\n      },\n    );\n    this.props.onPress(newEvent);\n  }\n\n  render() {\n    const props = {\n      id: this.props.id,\n      url: this.props.url,\n      shape: this._getShape(),\n      hitbox: this.props.hitbox,\n      hasPressListener: isFunction(this.props.onPress),\n      onMapboxShapeSourcePress: this.onPress.bind(this),\n      cluster: this.props.cluster ? 1 : 0,\n      clusterRadius: this.props.clusterRadius,\n      clusterMaxZoomLevel: this.props.clusterMaxZoomLevel,\n      maxZoomLevel: this.props.maxZoomLevel,\n      buffer: this.props.buffer,\n      tolerance: this.props.tolerance,\n      onPress: undefined,\n    };\n\n    return (\n      <RCTMGLShapeSource ref=\"nativeSource\" {...props}>\n        {cloneReactChildrenWithProps(this.props.children, {\n          sourceID: this.props.id,\n        })}\n      </RCTMGLShapeSource>\n    );\n  }\n}\n\nconst RCTMGLShapeSource = requireNativeComponent(\n  NATIVE_MODULE_NAME,\n  ShapeSource,\n  {\n    nativeOnly: {\n      hasPressListener: true,\n      onMapboxShapeSourcePress: true,\n    },\n  },\n);\n\nexport default ShapeSource;\n"]},"metadata":{},"sourceType":"script"}
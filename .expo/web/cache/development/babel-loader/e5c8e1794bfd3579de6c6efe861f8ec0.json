{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ANDROID_TEXTURE_NATIVE_MODULE_NAME = exports.NATIVE_MODULE_NAME = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _geoUtils = require(\"../utils/geoUtils\");\n\nvar _utils = require(\"../utils\");\n\nvar _filterUtils = require(\"../utils/filterUtils\");\n\nvar _NativeBridgeComponent = _interopRequireDefault(require(\"./NativeBridgeComponent\"));\n\nvar _jsxFileName = \"/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/components/MapView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar MapboxGL = _reactNative.NativeModules.MGLModule;\nvar NATIVE_MODULE_NAME = 'RCTMGLMapView';\nexports.NATIVE_MODULE_NAME = NATIVE_MODULE_NAME;\nvar ANDROID_TEXTURE_NATIVE_MODULE_NAME = 'RCTMGLAndroidTextureMapView';\nexports.ANDROID_TEXTURE_NATIVE_MODULE_NAME = ANDROID_TEXTURE_NATIVE_MODULE_NAME;\n\nvar styles = _reactNative.StyleSheet.create({\n  matchParent: {\n    flex: 1\n  }\n});\n\nvar MapView = function (_NativeBridgeComponen) {\n  (0, _inherits2.default)(MapView, _NativeBridgeComponen);\n\n  var _super = _createSuper(MapView);\n\n  function MapView(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, MapView);\n    _this = _super.call(this, props, NATIVE_MODULE_NAME);\n    _this.state = {\n      isReady: null,\n      region: null,\n      width: 0,\n      height: 0,\n      isUserInteraction: false\n    };\n    _this._onPress = _this._onPress.bind((0, _assertThisInitialized2.default)(_this));\n    _this._onLongPress = _this._onLongPress.bind((0, _assertThisInitialized2.default)(_this));\n    _this._onChange = _this._onChange.bind((0, _assertThisInitialized2.default)(_this));\n    _this._onLayout = _this._onLayout.bind((0, _assertThisInitialized2.default)(_this));\n    _this._onDebouncedRegionWillChange = _underscore.default.debounce(_this._onRegionWillChange.bind((0, _assertThisInitialized2.default)(_this)), props.regionWillChangeDebounceTime, true);\n    _this._onDebouncedRegionDidChange = _underscore.default.debounce(_this._onRegionDidChange.bind((0, _assertThisInitialized2.default)(_this)), props.regionDidChangeDebounceTime);\n    return _this;\n  }\n\n  (0, _createClass2.default)(MapView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._setHandledMapChangedEvents(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._onDebouncedRegionWillChange.cancel();\n\n      this._onDebouncedRegionDidChange.cancel();\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this._setHandledMapChangedEvents(nextProps);\n    }\n  }, {\n    key: \"_setHandledMapChangedEvents\",\n    value: function _setHandledMapChangedEvents(props) {\n      if ((0, _utils.isAndroid)()) {\n        var events = [];\n        if (props.onRegionWillChange) events.push(MapboxGL.EventTypes.RegionWillChange);\n        if (props.onRegionIsChanging) events.push(MapboxGL.EventTypes.RegionIsChanging);\n        if (props.onRegionDidChange) events.push(MapboxGL.EventTypes.RegionDidChange);\n        if (props.onUserLocationUpdate) events.push(MapboxGL.EventTypes.UserLocationUpdated);\n        if (props.onWillStartLoadingMap) events.push(MapboxGL.EventTypes.WillStartLoadingMap);\n        if (props.onDidFinishLoadingMap) events.push(MapboxGL.EventTypes.DidFinishLoadingMap);\n        if (props.onDidFailLoadingMap) events.push(MapboxGL.EventTypes.DidFailLoadingMap);\n        if (props.onWillStartRenderingFrame) events.push(MapboxGL.EventTypes.WillStartRenderingFrame);\n        if (props.onDidFinishRenderingFrame) events.push(MapboxGL.EventTypes.DidFinishRenderingFrame);\n        if (props.onDidFinishRenderingFrameFully) events.push(MapboxGL.EventTypes.DidFinishRenderingFrameFully);\n        if (props.onWillStartRenderingMap) events.push(MapboxGL.EventTypes.WillStartRenderingMap);\n        if (props.onDidFinishRenderingMap) events.push(MapboxGL.EventTypes.DidFinishRenderingMap);\n        if (props.onDidFinishRenderingMapFully) events.push(MapboxGL.EventTypes.DidFinishRenderingMapFully);\n        if (props.onDidFinishLoadingStyle) events.push(MapboxGL.EventTypes.DidFinishLoadingStyle);\n\n        this._runNativeCommand('setHandledMapChangedEvents', this._nativeRef, events);\n      }\n    }\n  }, {\n    key: \"getPointInView\",\n    value: function getPointInView(coordinate) {\n      var res;\n      return _regenerator.default.async(function getPointInView$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(this._runNativeCommand('getPointInView', this._nativeRef, [coordinate]));\n\n            case 2:\n              res = _context.sent;\n              return _context.abrupt(\"return\", res.pointInView);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getCoordinateFromView\",\n    value: function getCoordinateFromView(point) {\n      var res;\n      return _regenerator.default.async(function getCoordinateFromView$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regenerator.default.awrap(this._runNativeCommand('getCoordinateFromView', this._nativeRef, [point]));\n\n            case 2:\n              res = _context2.sent;\n              return _context2.abrupt(\"return\", res.coordinateFromView);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getVisibleBounds\",\n    value: function getVisibleBounds() {\n      var res;\n      return _regenerator.default.async(function getVisibleBounds$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regenerator.default.awrap(this._runNativeCommand('getVisibleBounds', this._nativeRef));\n\n            case 2:\n              res = _context3.sent;\n              return _context3.abrupt(\"return\", res.visibleBounds);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"queryRenderedFeaturesAtPoint\",\n    value: function queryRenderedFeaturesAtPoint(coordinate) {\n      var filter,\n          layerIDs,\n          res,\n          _args4 = arguments;\n      return _regenerator.default.async(function queryRenderedFeaturesAtPoint$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              filter = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : [];\n              layerIDs = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : [];\n\n              if (!(!coordinate || coordinate.length < 2)) {\n                _context4.next = 4;\n                break;\n              }\n\n              throw new Error('Must pass in valid coordinate[lng, lat]');\n\n            case 4:\n              _context4.next = 6;\n              return _regenerator.default.awrap(this._runNativeCommand('queryRenderedFeaturesAtPoint', this._nativeRef, [coordinate, (0, _filterUtils.getFilter)(filter), layerIDs]));\n\n            case 6:\n              res = _context4.sent;\n\n              if (!(0, _utils.isAndroid)()) {\n                _context4.next = 9;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", JSON.parse(res.data));\n\n            case 9:\n              return _context4.abrupt(\"return\", res.data);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"queryRenderedFeaturesInRect\",\n    value: function queryRenderedFeaturesInRect(bbox) {\n      var filter,\n          layerIDs,\n          res,\n          _args5 = arguments;\n      return _regenerator.default.async(function queryRenderedFeaturesInRect$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              filter = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];\n              layerIDs = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : [];\n\n              if (!(!bbox || bbox.length !== 4)) {\n                _context5.next = 4;\n                break;\n              }\n\n              throw new Error('Must pass in a valid bounding box[top, right, bottom, left]');\n\n            case 4:\n              _context5.next = 6;\n              return _regenerator.default.awrap(this._runNativeCommand('queryRenderedFeaturesInRect', this._nativeRef, [bbox, (0, _filterUtils.getFilter)(filter), layerIDs]));\n\n            case 6:\n              res = _context5.sent;\n\n              if (!(0, _utils.isAndroid)()) {\n                _context5.next = 9;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", JSON.parse(res.data));\n\n            case 9:\n              return _context5.abrupt(\"return\", res.data);\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setCamera\",\n    value: function setCamera() {\n      console.warn('MapView.setCamera is deprecated - please use Camera#setCamera');\n    }\n  }, {\n    key: \"takeSnap\",\n    value: function takeSnap() {\n      var writeToDisk,\n          res,\n          _args6 = arguments;\n      return _regenerator.default.async(function takeSnap$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              writeToDisk = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;\n              _context6.next = 3;\n              return _regenerator.default.awrap(this._runNativeCommand('takeSnap', this._nativeRef, [writeToDisk]));\n\n            case 3:\n              res = _context6.sent;\n              return _context6.abrupt(\"return\", res.uri);\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      var res;\n      return _regenerator.default.async(function getZoom$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regenerator.default.awrap(this._runNativeCommand('getZoom', this._nativeRef));\n\n            case 2:\n              res = _context7.sent;\n              return _context7.abrupt(\"return\", res.zoom);\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var res;\n      return _regenerator.default.async(function getCenter$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regenerator.default.awrap(this._runNativeCommand('getCenter', this._nativeRef));\n\n            case 2:\n              res = _context8.sent;\n              return _context8.abrupt(\"return\", res.center);\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setSourceVisibility\",\n    value: function setSourceVisibility(visible, sourceId) {\n      var sourceLayerId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      this._runNativeCommand('setSourceVisibility', this._nativeRef, [visible, sourceId, sourceLayerId]);\n    }\n  }, {\n    key: \"showAttribution\",\n    value: function showAttribution() {\n      return this._runNativeCommand('showAttribution', this._nativeRef);\n    }\n  }, {\n    key: \"_createStopConfig\",\n    value: function _createStopConfig() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var stopConfig = {\n        mode: (0, _utils.isNumber)(config.mode) ? config.mode : MapboxGL.CameraModes.Ease,\n        pitch: config.pitch,\n        heading: config.heading,\n        duration: config.duration || 2000,\n        zoom: config.zoom\n      };\n\n      if (config.centerCoordinate) {\n        stopConfig.centerCoordinate = (0, _utils.toJSONString)((0, _geoUtils.makePoint)(config.centerCoordinate));\n      }\n\n      if (config.bounds && config.bounds.ne && config.bounds.sw) {\n        var _config$bounds = config.bounds,\n            ne = _config$bounds.ne,\n            sw = _config$bounds.sw,\n            paddingLeft = _config$bounds.paddingLeft,\n            paddingRight = _config$bounds.paddingRight,\n            paddingTop = _config$bounds.paddingTop,\n            paddingBottom = _config$bounds.paddingBottom;\n        stopConfig.bounds = (0, _utils.toJSONString)((0, _geoUtils.makeLatLngBounds)(ne, sw));\n        stopConfig.boundsPaddingTop = paddingTop || 0;\n        stopConfig.boundsPaddingRight = paddingRight || 0;\n        stopConfig.boundsPaddingBottom = paddingBottom || 0;\n        stopConfig.boundsPaddingLeft = paddingLeft || 0;\n      }\n\n      return stopConfig;\n    }\n  }, {\n    key: \"_onPress\",\n    value: function _onPress(e) {\n      if ((0, _utils.isFunction)(this.props.onPress)) {\n        this.props.onPress(e.nativeEvent.payload);\n      }\n    }\n  }, {\n    key: \"_onLongPress\",\n    value: function _onLongPress(e) {\n      if ((0, _utils.isFunction)(this.props.onLongPress)) {\n        this.props.onLongPress(e.nativeEvent.payload);\n      }\n    }\n  }, {\n    key: \"_onRegionWillChange\",\n    value: function _onRegionWillChange(payload) {\n      if ((0, _utils.isFunction)(this.props.onRegionWillChange)) {\n        this.props.onRegionWillChange(payload);\n      }\n\n      this.setState({\n        isUserInteraction: payload.properties.isUserInteraction\n      });\n    }\n  }, {\n    key: \"_onRegionDidChange\",\n    value: function _onRegionDidChange(payload) {\n      if ((0, _utils.isFunction)(this.props.onRegionDidChange)) {\n        this.props.onRegionDidChange(payload);\n      }\n\n      this.setState({\n        region: payload\n      });\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(e) {\n      var _this$props = this.props,\n          regionWillChangeDebounceTime = _this$props.regionWillChangeDebounceTime,\n          regionDidChangeDebounceTime = _this$props.regionDidChangeDebounceTime;\n      var _e$nativeEvent = e.nativeEvent,\n          type = _e$nativeEvent.type,\n          payload = _e$nativeEvent.payload;\n      var propName = '';\n\n      switch (type) {\n        case MapboxGL.EventTypes.RegionWillChange:\n          if (regionWillChangeDebounceTime > 0) {\n            this._onDebouncedRegionWillChange(payload);\n          } else {\n            propName = 'onRegionWillChange';\n          }\n\n          break;\n\n        case MapboxGL.EventTypes.RegionIsChanging:\n          propName = 'onRegionIsChanging';\n          break;\n\n        case MapboxGL.EventTypes.RegionDidChange:\n          if (regionDidChangeDebounceTime > 0) {\n            this._onDebouncedRegionDidChange(payload);\n          } else {\n            propName = 'onRegionDidChange';\n          }\n\n          break;\n\n        case MapboxGL.EventTypes.UserLocationUpdated:\n          propName = 'onUserLocationUpdate';\n          break;\n\n        case MapboxGL.EventTypes.WillStartLoadingMap:\n          propName = 'onWillStartLoadingMap';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishLoadingMap:\n          propName = 'onDidFinishLoadingMap';\n          break;\n\n        case MapboxGL.EventTypes.DidFailLoadingMap:\n          propName = 'onDidFailLoadingMap';\n          break;\n\n        case MapboxGL.EventTypes.WillStartRenderingFrame:\n          propName = 'onWillStartRenderingFrame';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishRenderingFrame:\n          propName = 'onDidFinishRenderingFrame';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishRenderingFrameFully:\n          propName = 'onDidFinishRenderingFrameFully';\n          break;\n\n        case MapboxGL.EventTypes.WillStartRenderingMap:\n          propName = 'onWillStartRenderingMap';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishRenderingMap:\n          propName = 'onDidFinishRenderingMap';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishRenderingMapFully:\n          propName = 'onDidFinishRenderingMapFully';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishLoadingStyle:\n          propName = 'onDidFinishLoadingStyle';\n          break;\n\n        default:\n          console.warn('Unhandled event callback type', type);\n      }\n\n      if (propName.length) {\n        this._handleOnChange(propName, payload);\n      }\n    }\n  }, {\n    key: \"_onLayout\",\n    value: function _onLayout(e) {\n      this.setState({\n        isReady: true,\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height\n      });\n    }\n  }, {\n    key: \"_handleOnChange\",\n    value: function _handleOnChange(propName, payload) {\n      if ((0, _utils.isFunction)(this.props[propName])) {\n        this.props[propName](payload);\n      }\n    }\n  }, {\n    key: \"_getCenterCoordinate\",\n    value: function _getCenterCoordinate() {\n      if (!this.props.centerCoordinate) {\n        return;\n      }\n\n      return (0, _utils.toJSONString)((0, _geoUtils.makePoint)(this.props.centerCoordinate));\n    }\n  }, {\n    key: \"_getVisibleCoordinateBounds\",\n    value: function _getVisibleCoordinateBounds() {\n      if (!this.props.visibleCoordinateBounds) {\n        return;\n      }\n\n      return (0, _utils.toJSONString)((0, _geoUtils.makeLatLngBounds)(this.props.visibleCoordinateBounds[0], this.props.visibleCoordinateBounds[1]));\n    }\n  }, {\n    key: \"_getContentInset\",\n    value: function _getContentInset() {\n      if (!this.props.contentInset) {\n        return;\n      }\n\n      if (!Array.isArray(this.props.contentInset)) {\n        return [this.props.contentInset];\n      }\n\n      return this.props.contentInset;\n    }\n  }, {\n    key: \"_setNativeRef\",\n    value: function _setNativeRef(nativeRef) {\n      this._nativeRef = nativeRef;\n      (0, _get2.default)((0, _getPrototypeOf2.default)(MapView.prototype), \"_runPendingNativeCommands\", this).call(this, nativeRef);\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      if (this._nativeRef) {\n        this._nativeRef.setNativeProps(props);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = _objectSpread({}, this.props, {\n        contentInset: this._getContentInset(),\n        style: styles.matchParent\n      });\n\n      var callbacks = {\n        ref: function ref(nativeRef) {\n          return _this2._setNativeRef(nativeRef);\n        },\n        onPress: this._onPress,\n        onLongPress: this._onLongPress,\n        onMapChange: this._onChange,\n        onAndroidCallback: (0, _utils.isAndroid)() ? this._onAndroidCallback : undefined\n      };\n      var mapView = null;\n\n      if ((0, _utils.isAndroid)() && !this.props.surfaceView && this.state.isReady) {\n        mapView = _react.default.createElement(RCTMGLAndroidTextureMapView, (0, _extends2.default)({}, props, callbacks, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 9\n          }\n        }), this.props.children);\n      } else if (this.state.isReady) {\n        mapView = _react.default.createElement(RCTMGLMapView, (0, _extends2.default)({}, props, callbacks, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 9\n          }\n        }), this.props.children);\n      }\n\n      return _react.default.createElement(_reactNative.View, {\n        onLayout: this._onLayout,\n        style: this.props.style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 7\n        }\n      }, mapView);\n    }\n  }]);\n  return MapView;\n}((0, _NativeBridgeComponent.default)(_react.default.Component));\n\nMapView.propTypes = _objectSpread({}, _utils.viewPropTypes, {\n  contentInset: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),\n  style: _propTypes.default.any,\n  styleURL: _propTypes.default.string,\n  preferredFramesPerSecond: _propTypes.default.number,\n  localizeLabels: _propTypes.default.bool,\n  zoomEnabled: _propTypes.default.bool,\n  scrollEnabled: _propTypes.default.bool,\n  pitchEnabled: _propTypes.default.bool,\n  rotateEnabled: _propTypes.default.bool,\n  attributionEnabled: _propTypes.default.bool,\n  attributionPosition: _propTypes.default.oneOfType([_propTypes.default.shape({\n    top: _propTypes.default.number,\n    left: _propTypes.default.number\n  }), _propTypes.default.shape({\n    top: _propTypes.default.number,\n    right: _propTypes.default.number\n  }), _propTypes.default.shape({\n    bottom: _propTypes.default.number,\n    left: _propTypes.default.number\n  }), _propTypes.default.shape({\n    bottom: _propTypes.default.number,\n    right: _propTypes.default.number\n  })]),\n  logoEnabled: _propTypes.default.bool,\n  compassEnabled: _propTypes.default.bool,\n  compassViewPosition: _propTypes.default.number,\n  compassViewMargins: _propTypes.default.object,\n  surfaceView: _propTypes.default.bool,\n  onPress: _propTypes.default.func,\n  onLongPress: _propTypes.default.func,\n  onRegionWillChange: _propTypes.default.func,\n  onRegionIsChanging: _propTypes.default.func,\n  onRegionDidChange: _propTypes.default.func,\n  onWillStartLoadingMap: _propTypes.default.func,\n  onDidFinishLoadingMap: _propTypes.default.func,\n  onDidFailLoadingMap: _propTypes.default.func,\n  onWillStartRenderingFrame: _propTypes.default.func,\n  onDidFinishRenderingFrame: _propTypes.default.func,\n  onDidFinishRenderingFrameFully: _propTypes.default.func,\n  onWillStartRenderingMap: _propTypes.default.func,\n  onDidFinishRenderingMap: _propTypes.default.func,\n  onDidFinishRenderingMapFully: _propTypes.default.func,\n  onUserLocationUpdate: _propTypes.default.func,\n  onDidFinishLoadingStyle: _propTypes.default.func,\n  regionWillChangeDebounceTime: _propTypes.default.number,\n  regionDidChangeDebounceTime: _propTypes.default.number\n});\nMapView.defaultProps = {\n  localizeLabels: false,\n  scrollEnabled: true,\n  pitchEnabled: true,\n  rotateEnabled: true,\n  attributionEnabled: true,\n  logoEnabled: true,\n  styleURL: MapboxGL.StyleURL.Street,\n  surfaceView: false,\n  regionWillChangeDebounceTime: 10,\n  regionDidChangeDebounceTime: 500\n};\nvar RCTMGLMapView = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME, MapView, {\n  nativeOnly: {\n    onMapChange: true,\n    onAndroidCallback: true\n  }\n});\nvar RCTMGLAndroidTextureMapView;\n\nif ((0, _utils.isAndroid)()) {\n  RCTMGLAndroidTextureMapView = (0, _reactNative.requireNativeComponent)(ANDROID_TEXTURE_NATIVE_MODULE_NAME, MapView, {\n    nativeOnly: {\n      onMapChange: true,\n      onAndroidCallback: true\n    }\n  });\n}\n\nvar _default = MapView;\nexports.default = _default;","map":{"version":3,"sources":["/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/components/MapView.js"],"names":["MapboxGL","NativeModules","MGLModule","NATIVE_MODULE_NAME","ANDROID_TEXTURE_NATIVE_MODULE_NAME","styles","StyleSheet","create","matchParent","flex","MapView","props","state","isReady","region","width","height","isUserInteraction","_onPress","bind","_onLongPress","_onChange","_onLayout","_onDebouncedRegionWillChange","_","debounce","_onRegionWillChange","regionWillChangeDebounceTime","_onDebouncedRegionDidChange","_onRegionDidChange","regionDidChangeDebounceTime","_setHandledMapChangedEvents","cancel","nextProps","events","onRegionWillChange","push","EventTypes","RegionWillChange","onRegionIsChanging","RegionIsChanging","onRegionDidChange","RegionDidChange","onUserLocationUpdate","UserLocationUpdated","onWillStartLoadingMap","WillStartLoadingMap","onDidFinishLoadingMap","DidFinishLoadingMap","onDidFailLoadingMap","DidFailLoadingMap","onWillStartRenderingFrame","WillStartRenderingFrame","onDidFinishRenderingFrame","DidFinishRenderingFrame","onDidFinishRenderingFrameFully","DidFinishRenderingFrameFully","onWillStartRenderingMap","WillStartRenderingMap","onDidFinishRenderingMap","DidFinishRenderingMap","onDidFinishRenderingMapFully","DidFinishRenderingMapFully","onDidFinishLoadingStyle","DidFinishLoadingStyle","_runNativeCommand","_nativeRef","coordinate","res","pointInView","point","coordinateFromView","visibleBounds","filter","layerIDs","length","Error","JSON","parse","data","bbox","console","warn","writeToDisk","uri","zoom","center","visible","sourceId","sourceLayerId","undefined","config","stopConfig","mode","CameraModes","Ease","pitch","heading","duration","centerCoordinate","bounds","ne","sw","paddingLeft","paddingRight","paddingTop","paddingBottom","boundsPaddingTop","boundsPaddingRight","boundsPaddingBottom","boundsPaddingLeft","e","onPress","nativeEvent","payload","onLongPress","setState","properties","type","propName","_handleOnChange","layout","visibleCoordinateBounds","contentInset","Array","isArray","nativeRef","setNativeProps","_getContentInset","style","callbacks","ref","_setNativeRef","onMapChange","onAndroidCallback","_onAndroidCallback","mapView","surfaceView","children","React","Component","propTypes","viewPropTypes","PropTypes","oneOfType","arrayOf","number","any","styleURL","string","preferredFramesPerSecond","localizeLabels","bool","zoomEnabled","scrollEnabled","pitchEnabled","rotateEnabled","attributionEnabled","attributionPosition","shape","top","left","right","bottom","logoEnabled","compassEnabled","compassViewPosition","compassViewMargins","object","func","defaultProps","StyleURL","Street","RCTMGLMapView","nativeOnly","RCTMGLAndroidTextureMapView"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAMA;;AAEA;;AACA;;AAOA;;AAEA;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,2BAAcC,SAA/B;AAEO,IAAMC,kBAAkB,GAAG,eAA3B;;AAEA,IAAMC,kCAAkC,GAAG,6BAA3C;;;AAEP,IAAMC,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,WAAW,EAAE;AAACC,IAAAA,IAAI,EAAE;AAAP;AADkB,CAAlB,CAAf;;IAOMC,O;;;;;AAyNJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN,EAAaR,kBAAb;AAEA,UAAKS,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,MAAM,EAAE,IAFG;AAGXC,MAAAA,KAAK,EAAE,CAHI;AAIXC,MAAAA,MAAM,EAAE,CAJG;AAKXC,MAAAA,iBAAiB,EAAE;AALR,KAAb;AAQA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,6CAAhB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,6CAApB;AACA,UAAKE,SAAL,GAAiB,MAAKA,SAAL,CAAeF,IAAf,6CAAjB;AACA,UAAKG,SAAL,GAAiB,MAAKA,SAAL,CAAeH,IAAf,6CAAjB;AAGA,UAAKI,4BAAL,GAAoCC,oBAAEC,QAAF,CAClC,MAAKC,mBAAL,CAAyBP,IAAzB,6CADkC,EAElCR,KAAK,CAACgB,4BAF4B,EAGlC,IAHkC,CAApC;AAMA,UAAKC,2BAAL,GAAmCJ,oBAAEC,QAAF,CACjC,MAAKI,kBAAL,CAAwBV,IAAxB,6CADiC,EAEjCR,KAAK,CAACmB,2BAF2B,CAAnC;AAvBiB;AA2BlB;;;;wCAEmB;AAClB,WAAKC,2BAAL,CAAiC,KAAKpB,KAAtC;AACD;;;2CAEsB;AACrB,WAAKY,4BAAL,CAAkCS,MAAlC;;AACA,WAAKJ,2BAAL,CAAiCI,MAAjC;AACD;;;qDAEgCC,S,EAAW;AAC1C,WAAKF,2BAAL,CAAiCE,SAAjC;AACD;;;gDAE2BtB,K,EAAO;AACjC,UAAI,uBAAJ,EAAiB;AACf,YAAMuB,MAAM,GAAG,EAAf;AAEA,YAAIvB,KAAK,CAACwB,kBAAV,EACED,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBC,gBAAhC;AACF,YAAI3B,KAAK,CAAC4B,kBAAV,EACEL,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBG,gBAAhC;AACF,YAAI7B,KAAK,CAAC8B,iBAAV,EACEP,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBK,eAAhC;AACF,YAAI/B,KAAK,CAACgC,oBAAV,EACET,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBO,mBAAhC;AACF,YAAIjC,KAAK,CAACkC,qBAAV,EACEX,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBS,mBAAhC;AACF,YAAInC,KAAK,CAACoC,qBAAV,EACEb,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBW,mBAAhC;AACF,YAAIrC,KAAK,CAACsC,mBAAV,EACEf,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBa,iBAAhC;AACF,YAAIvC,KAAK,CAACwC,yBAAV,EACEjB,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBe,uBAAhC;AACF,YAAIzC,KAAK,CAAC0C,yBAAV,EACEnB,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBiB,uBAAhC;AACF,YAAI3C,KAAK,CAAC4C,8BAAV,EACErB,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBmB,4BAAhC;AACF,YAAI7C,KAAK,CAAC8C,uBAAV,EACEvB,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBqB,qBAAhC;AACF,YAAI/C,KAAK,CAACgD,uBAAV,EACEzB,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoBuB,qBAAhC;AACF,YAAIjD,KAAK,CAACkD,4BAAV,EACE3B,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoByB,0BAAhC;AACF,YAAInD,KAAK,CAACoD,uBAAV,EACE7B,MAAM,CAACE,IAAP,CAAYpC,QAAQ,CAACqC,UAAT,CAAoB2B,qBAAhC;;AAEF,aAAKC,iBAAL,CACE,4BADF,EAEE,KAAKC,UAFP,EAGEhC,MAHF;AAKD;AACF;;;mCAWoBiC,U;;;;;;;gDACD,KAAKF,iBAAL,CAChB,gBADgB,EAEhB,KAAKC,UAFW,EAGhB,CAACC,UAAD,CAHgB,C;;;AAAZC,cAAAA,G;+CAKCA,GAAG,CAACC,W;;;;;;;;;;;0CAYeC,K;;;;;;;gDACR,KAAKL,iBAAL,CAChB,uBADgB,EAEhB,KAAKC,UAFW,EAGhB,CAACI,KAAD,CAHgB,C;;;AAAZF,cAAAA,G;gDAKCA,GAAG,CAACG,kB;;;;;;;;;;;;;;;;;;gDAYO,KAAKN,iBAAL,CAChB,kBADgB,EAEhB,KAAKC,UAFW,C;;;AAAZE,cAAAA,G;gDAICA,GAAG,CAACI,a;;;;;;;;;;;iDAcsBL,U;;;;;;;;;AAAYM,cAAAA,M,8DAAS,E;AAAIC,cAAAA,Q,8DAAW,E;;oBACjE,CAACP,UAAD,IAAeA,UAAU,CAACQ,MAAX,GAAoB,C;;;;;oBAC/B,IAAIC,KAAJ,CAAU,yCAAV,C;;;;gDAGU,KAAKX,iBAAL,CAChB,8BADgB,EAEhB,KAAKC,UAFW,EAGhB,CAACC,UAAD,EAAa,4BAAUM,MAAV,CAAb,EAAgCC,QAAhC,CAHgB,C;;;AAAZN,cAAAA,G;;mBAMF,uB;;;;;gDACKS,IAAI,CAACC,KAAL,CAAWV,GAAG,CAACW,IAAf,C;;;gDAGFX,GAAG,CAACW,I;;;;;;;;;;;gDAeqBC,I;;;;;;;;;AAAMP,cAAAA,M,8DAAS,E;AAAIC,cAAAA,Q,8DAAW,E;;oBAC1D,CAACM,IAAD,IAASA,IAAI,CAACL,MAAL,KAAgB,C;;;;;oBACrB,IAAIC,KAAJ,CACJ,6DADI,C;;;;gDAIU,KAAKX,iBAAL,CAChB,6BADgB,EAEhB,KAAKC,UAFW,EAGhB,CAACc,IAAD,EAAO,4BAAUP,MAAV,CAAP,EAA0BC,QAA1B,CAHgB,C;;;AAAZN,cAAAA,G;;mBAMF,uB;;;;;gDACKS,IAAI,CAACC,KAAL,CAAWV,GAAG,CAACW,IAAf,C;;;gDAGFX,GAAG,CAACW,I;;;;;;;;;;;gCAMD;AACVE,MAAAA,OAAO,CAACC,IAAR,CACE,+DADF;AAGD;;;;;;;;;;;AAOcC,cAAAA,W,8DAAc,K;;gDACT,KAAKlB,iBAAL,CAAuB,UAAvB,EAAmC,KAAKC,UAAxC,EAAoD,CACpEiB,WADoE,CAApD,C;;;AAAZf,cAAAA,G;gDAGCA,GAAG,CAACgB,G;;;;;;;;;;;;;;;;;;gDAaO,KAAKnB,iBAAL,CAAuB,SAAvB,EAAkC,KAAKC,UAAvC,C;;;AAAZE,cAAAA,G;gDACCA,GAAG,CAACiB,I;;;;;;;;;;;;;;;;;;gDAYO,KAAKpB,iBAAL,CAAuB,WAAvB,EAAoC,KAAKC,UAAzC,C;;;AAAZE,cAAAA,G;gDACCA,GAAG,CAACkB,M;;;;;;;;;;;wCAaOC,O,EAASC,Q,EAAqC;AAAA,UAA3BC,aAA2B,uEAAXC,SAAW;;AAChE,WAAKzB,iBAAL,CAAuB,qBAAvB,EAA8C,KAAKC,UAAnD,EAA+D,CAC7DqB,OAD6D,EAE7DC,QAF6D,EAG7DC,aAH6D,CAA/D;AAKD;;;sCAMiB;AAChB,aAAO,KAAKxB,iBAAL,CAAuB,iBAAvB,EAA0C,KAAKC,UAA/C,CAAP;AACD;;;wCAE8B;AAAA,UAAbyB,MAAa,uEAAJ,EAAI;AAC7B,UAAMC,UAAU,GAAG;AACjBC,QAAAA,IAAI,EAAE,qBAASF,MAAM,CAACE,IAAhB,IAAwBF,MAAM,CAACE,IAA/B,GAAsC7F,QAAQ,CAAC8F,WAAT,CAAqBC,IADhD;AAEjBC,QAAAA,KAAK,EAAEL,MAAM,CAACK,KAFG;AAGjBC,QAAAA,OAAO,EAAEN,MAAM,CAACM,OAHC;AAIjBC,QAAAA,QAAQ,EAAEP,MAAM,CAACO,QAAP,IAAmB,IAJZ;AAKjBb,QAAAA,IAAI,EAAEM,MAAM,CAACN;AALI,OAAnB;;AAQA,UAAIM,MAAM,CAACQ,gBAAX,EAA6B;AAC3BP,QAAAA,UAAU,CAACO,gBAAX,GAA8B,yBAC5B,yBAAUR,MAAM,CAACQ,gBAAjB,CAD4B,CAA9B;AAGD;;AAED,UAAIR,MAAM,CAACS,MAAP,IAAiBT,MAAM,CAACS,MAAP,CAAcC,EAA/B,IAAqCV,MAAM,CAACS,MAAP,CAAcE,EAAvD,EAA2D;AAAA,6BAQrDX,MAAM,CAACS,MAR8C;AAAA,YAEvDC,EAFuD,kBAEvDA,EAFuD;AAAA,YAGvDC,EAHuD,kBAGvDA,EAHuD;AAAA,YAIvDC,WAJuD,kBAIvDA,WAJuD;AAAA,YAKvDC,YALuD,kBAKvDA,YALuD;AAAA,YAMvDC,UANuD,kBAMvDA,UANuD;AAAA,YAOvDC,aAPuD,kBAOvDA,aAPuD;AASzDd,QAAAA,UAAU,CAACQ,MAAX,GAAoB,yBAAa,gCAAiBC,EAAjB,EAAqBC,EAArB,CAAb,CAApB;AACAV,QAAAA,UAAU,CAACe,gBAAX,GAA8BF,UAAU,IAAI,CAA5C;AACAb,QAAAA,UAAU,CAACgB,kBAAX,GAAgCJ,YAAY,IAAI,CAAhD;AACAZ,QAAAA,UAAU,CAACiB,mBAAX,GAAiCH,aAAa,IAAI,CAAlD;AACAd,QAAAA,UAAU,CAACkB,iBAAX,GAA+BP,WAAW,IAAI,CAA9C;AACD;;AAED,aAAOX,UAAP;AACD;;;6BAEQmB,C,EAAG;AACV,UAAI,uBAAW,KAAKpG,KAAL,CAAWqG,OAAtB,CAAJ,EAAoC;AAClC,aAAKrG,KAAL,CAAWqG,OAAX,CAAmBD,CAAC,CAACE,WAAF,CAAcC,OAAjC;AACD;AACF;;;iCAEYH,C,EAAG;AACd,UAAI,uBAAW,KAAKpG,KAAL,CAAWwG,WAAtB,CAAJ,EAAwC;AACtC,aAAKxG,KAAL,CAAWwG,WAAX,CAAuBJ,CAAC,CAACE,WAAF,CAAcC,OAArC;AACD;AACF;;;wCAEmBA,O,EAAS;AAC3B,UAAI,uBAAW,KAAKvG,KAAL,CAAWwB,kBAAtB,CAAJ,EAA+C;AAC7C,aAAKxB,KAAL,CAAWwB,kBAAX,CAA8B+E,OAA9B;AACD;;AACD,WAAKE,QAAL,CAAc;AAACnG,QAAAA,iBAAiB,EAAEiG,OAAO,CAACG,UAAR,CAAmBpG;AAAvC,OAAd;AACD;;;uCAEkBiG,O,EAAS;AAC1B,UAAI,uBAAW,KAAKvG,KAAL,CAAW8B,iBAAtB,CAAJ,EAA8C;AAC5C,aAAK9B,KAAL,CAAW8B,iBAAX,CAA6ByE,OAA7B;AACD;;AACD,WAAKE,QAAL,CAAc;AAACtG,QAAAA,MAAM,EAAEoG;AAAT,OAAd;AACD;;;8BAESH,C,EAAG;AAAA,wBAIP,KAAKpG,KAJE;AAAA,UAETgB,4BAFS,eAETA,4BAFS;AAAA,UAGTG,2BAHS,eAGTA,2BAHS;AAAA,2BAKaiF,CAAC,CAACE,WALf;AAAA,UAKJK,IALI,kBAKJA,IALI;AAAA,UAKEJ,OALF,kBAKEA,OALF;AAMX,UAAIK,QAAQ,GAAG,EAAf;;AAEA,cAAQD,IAAR;AACE,aAAKtH,QAAQ,CAACqC,UAAT,CAAoBC,gBAAzB;AACE,cAAIX,4BAA4B,GAAG,CAAnC,EAAsC;AACpC,iBAAKJ,4BAAL,CAAkC2F,OAAlC;AACD,WAFD,MAEO;AACLK,YAAAA,QAAQ,GAAG,oBAAX;AACD;;AACD;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBG,gBAAzB;AACE+E,UAAAA,QAAQ,GAAG,oBAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBK,eAAzB;AACE,cAAIZ,2BAA2B,GAAG,CAAlC,EAAqC;AACnC,iBAAKF,2BAAL,CAAiCsF,OAAjC;AACD,WAFD,MAEO;AACLK,YAAAA,QAAQ,GAAG,mBAAX;AACD;;AACD;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBO,mBAAzB;AACE2E,UAAAA,QAAQ,GAAG,sBAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBS,mBAAzB;AACEyE,UAAAA,QAAQ,GAAG,uBAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBW,mBAAzB;AACEuE,UAAAA,QAAQ,GAAG,uBAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBa,iBAAzB;AACEqE,UAAAA,QAAQ,GAAG,qBAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBe,uBAAzB;AACEmE,UAAAA,QAAQ,GAAG,2BAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBiB,uBAAzB;AACEiE,UAAAA,QAAQ,GAAG,2BAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBmB,4BAAzB;AACE+D,UAAAA,QAAQ,GAAG,gCAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBqB,qBAAzB;AACE6D,UAAAA,QAAQ,GAAG,yBAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoBuB,qBAAzB;AACE2D,UAAAA,QAAQ,GAAG,yBAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoByB,0BAAzB;AACEyD,UAAAA,QAAQ,GAAG,8BAAX;AACA;;AACF,aAAKvH,QAAQ,CAACqC,UAAT,CAAoB2B,qBAAzB;AACEuD,UAAAA,QAAQ,GAAG,yBAAX;AACA;;AACF;AACEtC,UAAAA,OAAO,CAACC,IAAR,CAAa,+BAAb,EAA8CoC,IAA9C;AApDJ;;AAuDA,UAAIC,QAAQ,CAAC5C,MAAb,EAAqB;AACnB,aAAK6C,eAAL,CAAqBD,QAArB,EAA+BL,OAA/B;AACD;AACF;;;8BAESH,C,EAAG;AACX,WAAKK,QAAL,CAAc;AACZvG,QAAAA,OAAO,EAAE,IADG;AAEZE,QAAAA,KAAK,EAAEgG,CAAC,CAACE,WAAF,CAAcQ,MAAd,CAAqB1G,KAFhB;AAGZC,QAAAA,MAAM,EAAE+F,CAAC,CAACE,WAAF,CAAcQ,MAAd,CAAqBzG;AAHjB,OAAd;AAKD;;;oCAEeuG,Q,EAAUL,O,EAAS;AACjC,UAAI,uBAAW,KAAKvG,KAAL,CAAW4G,QAAX,CAAX,CAAJ,EAAsC;AACpC,aAAK5G,KAAL,CAAW4G,QAAX,EAAqBL,OAArB;AACD;AACF;;;2CAEsB;AACrB,UAAI,CAAC,KAAKvG,KAAL,CAAWwF,gBAAhB,EAAkC;AAChC;AACD;;AACD,aAAO,yBAAa,yBAAU,KAAKxF,KAAL,CAAWwF,gBAArB,CAAb,CAAP;AACD;;;kDAE6B;AAC5B,UAAI,CAAC,KAAKxF,KAAL,CAAW+G,uBAAhB,EAAyC;AACvC;AACD;;AACD,aAAO,yBACL,gCACE,KAAK/G,KAAL,CAAW+G,uBAAX,CAAmC,CAAnC,CADF,EAEE,KAAK/G,KAAL,CAAW+G,uBAAX,CAAmC,CAAnC,CAFF,CADK,CAAP;AAMD;;;uCAEkB;AACjB,UAAI,CAAC,KAAK/G,KAAL,CAAWgH,YAAhB,EAA8B;AAC5B;AACD;;AAED,UAAI,CAACC,KAAK,CAACC,OAAN,CAAc,KAAKlH,KAAL,CAAWgH,YAAzB,CAAL,EAA6C;AAC3C,eAAO,CAAC,KAAKhH,KAAL,CAAWgH,YAAZ,CAAP;AACD;;AAED,aAAO,KAAKhH,KAAL,CAAWgH,YAAlB;AACD;;;kCAEaG,S,EAAW;AACvB,WAAK5D,UAAL,GAAkB4D,SAAlB;AACA,yHAAgCA,SAAhC;AACD;;;mCAEcnH,K,EAAO;AACpB,UAAI,KAAKuD,UAAT,EAAqB;AACnB,aAAKA,UAAL,CAAgB6D,cAAhB,CAA+BpH,KAA/B;AACD;AACF;;;6BAEQ;AAAA;;AACP,UAAMA,KAAK,qBACN,KAAKA,KADC;AAETgH,QAAAA,YAAY,EAAE,KAAKK,gBAAL,EAFL;AAGTC,QAAAA,KAAK,EAAE5H,MAAM,CAACG;AAHL,QAAX;;AAMA,UAAM0H,SAAS,GAAG;AAChBC,QAAAA,GAAG,EAAE,aAAAL,SAAS;AAAA,iBAAI,MAAI,CAACM,aAAL,CAAmBN,SAAnB,CAAJ;AAAA,SADE;AAEhBd,QAAAA,OAAO,EAAE,KAAK9F,QAFE;AAGhBiG,QAAAA,WAAW,EAAE,KAAK/F,YAHF;AAIhBiH,QAAAA,WAAW,EAAE,KAAKhH,SAJF;AAKhBiH,QAAAA,iBAAiB,EAAE,0BAAc,KAAKC,kBAAnB,GAAwC7C;AAL3C,OAAlB;AAQA,UAAI8C,OAAO,GAAG,IAAd;;AACA,UAAI,2BAAe,CAAC,KAAK7H,KAAL,CAAW8H,WAA3B,IAA0C,KAAK7H,KAAL,CAAWC,OAAzD,EAAkE;AAChE2H,QAAAA,OAAO,GACL,6BAAC,2BAAD,6BAAiC7H,KAAjC,EAA4CuH,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACG,KAAKvH,KAAL,CAAW+H,QADd,CADF;AAKD,OAND,MAMO,IAAI,KAAK9H,KAAL,CAAWC,OAAf,EAAwB;AAC7B2H,QAAAA,OAAO,GACL,6BAAC,aAAD,6BAAmB7H,KAAnB,EAA8BuH,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACG,KAAKvH,KAAL,CAAW+H,QADd,CADF;AAKD;;AAED,aACE,6BAAC,iBAAD;AAAM,QAAA,QAAQ,EAAE,KAAKpH,SAArB;AAAgC,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWsH,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGO,OADH,CADF;AAKD;;;EAjsBmB,oCAAsBG,eAAMC,SAA5B,C;;AAAhBlI,O,CACGmI,S,qBACFC,oB;AAKHnB,EAAAA,YAAY,EAAEoB,mBAAUC,SAAV,CAAoB,CAChCD,mBAAUE,OAAV,CAAkBF,mBAAUG,MAA5B,CADgC,EAEhCH,mBAAUG,MAFsB,CAApB,C;AAQdjB,EAAAA,KAAK,EAAEc,mBAAUI,G;AAKjBC,EAAAA,QAAQ,EAAEL,mBAAUM,M;AAWpBC,EAAAA,wBAAwB,EAAEP,mBAAUG,M;AAMpCK,EAAAA,cAAc,EAAER,mBAAUS,I;AAK1BC,EAAAA,WAAW,EAAEV,mBAAUS,I;AAKvBE,EAAAA,aAAa,EAAEX,mBAAUS,I;AAKzBG,EAAAA,YAAY,EAAEZ,mBAAUS,I;AAKxBI,EAAAA,aAAa,EAAEb,mBAAUS,I;AAazBK,EAAAA,kBAAkB,EAAEd,mBAAUS,I;AAK9BM,EAAAA,mBAAmB,EAAEf,mBAAUC,SAAV,CAAoB,CACvCD,mBAAUgB,KAAV,CAAgB;AAACC,IAAAA,GAAG,EAAEjB,mBAAUG,MAAhB;AAAwBe,IAAAA,IAAI,EAAElB,mBAAUG;AAAxC,GAAhB,CADuC,EAEvCH,mBAAUgB,KAAV,CAAgB;AAACC,IAAAA,GAAG,EAAEjB,mBAAUG,MAAhB;AAAwBgB,IAAAA,KAAK,EAAEnB,mBAAUG;AAAzC,GAAhB,CAFuC,EAGvCH,mBAAUgB,KAAV,CAAgB;AAACI,IAAAA,MAAM,EAAEpB,mBAAUG,MAAnB;AAA2Be,IAAAA,IAAI,EAAElB,mBAAUG;AAA3C,GAAhB,CAHuC,EAIvCH,mBAAUgB,KAAV,CAAgB;AAACI,IAAAA,MAAM,EAAEpB,mBAAUG,MAAnB;AAA2BgB,IAAAA,KAAK,EAAEnB,mBAAUG;AAA5C,GAAhB,CAJuC,CAApB,C;AAUrBkB,EAAAA,WAAW,EAAErB,mBAAUS,I;AAKvBa,EAAAA,cAAc,EAAEtB,mBAAUS,I;AAK1Bc,EAAAA,mBAAmB,EAAEvB,mBAAUG,M;AAK/BqB,EAAAA,kBAAkB,EAAExB,mBAAUyB,M;AAK9B/B,EAAAA,WAAW,EAAEM,mBAAUS,I;AAKvBxC,EAAAA,OAAO,EAAE+B,mBAAU0B,I;AAKnBtD,EAAAA,WAAW,EAAE4B,mBAAU0B,I;AAOvBtI,EAAAA,kBAAkB,EAAE4G,mBAAU0B,I;AAO9BlI,EAAAA,kBAAkB,EAAEwG,mBAAU0B,I;AAO9BhI,EAAAA,iBAAiB,EAAEsG,mBAAU0B,I;AAK7B5H,EAAAA,qBAAqB,EAAEkG,mBAAU0B,I;AAKjC1H,EAAAA,qBAAqB,EAAEgG,mBAAU0B,I;AAKjCxH,EAAAA,mBAAmB,EAAE8F,mBAAU0B,I;AAK/BtH,EAAAA,yBAAyB,EAAE4F,mBAAU0B,I;AAKrCpH,EAAAA,yBAAyB,EAAE0F,mBAAU0B,I;AAKrClH,EAAAA,8BAA8B,EAAEwF,mBAAU0B,I;AAK1ChH,EAAAA,uBAAuB,EAAEsF,mBAAU0B,I;AAKnC9G,EAAAA,uBAAuB,EAAEoF,mBAAU0B,I;AAKnC5G,EAAAA,4BAA4B,EAAEkF,mBAAU0B,I;AAKxC9H,EAAAA,oBAAoB,EAAEoG,mBAAU0B,I;AAKhC1G,EAAAA,uBAAuB,EAAEgF,mBAAU0B,I;AAKnC9I,EAAAA,4BAA4B,EAAEoH,mBAAUG,M;AAKxCpH,EAAAA,2BAA2B,EAAEiH,mBAAUG;;AAzMrCxI,O,CA4MGgK,Y,GAAe;AACpBnB,EAAAA,cAAc,EAAE,KADI;AAEpBG,EAAAA,aAAa,EAAE,IAFK;AAGpBC,EAAAA,YAAY,EAAE,IAHM;AAIpBC,EAAAA,aAAa,EAAE,IAJK;AAKpBC,EAAAA,kBAAkB,EAAE,IALA;AAMpBO,EAAAA,WAAW,EAAE,IANO;AAOpBhB,EAAAA,QAAQ,EAAEpJ,QAAQ,CAAC2K,QAAT,CAAkBC,MAPR;AAQpBnC,EAAAA,WAAW,EAAE,KARO;AASpB9G,EAAAA,4BAA4B,EAAE,EATV;AAUpBG,EAAAA,2BAA2B,EAAE;AAVT,C;AAwfxB,IAAM+I,aAAa,GAAG,yCAAuB1K,kBAAvB,EAA2CO,OAA3C,EAAoD;AACxEoK,EAAAA,UAAU,EAAE;AAACzC,IAAAA,WAAW,EAAE,IAAd;AAAoBC,IAAAA,iBAAiB,EAAE;AAAvC;AAD4D,CAApD,CAAtB;AAIA,IAAIyC,2BAAJ;;AACA,IAAI,uBAAJ,EAAiB;AACfA,EAAAA,2BAA2B,GAAG,yCAC5B3K,kCAD4B,EAE5BM,OAF4B,EAG5B;AACEoK,IAAAA,UAAU,EAAE;AAACzC,MAAAA,WAAW,EAAE,IAAd;AAAoBC,MAAAA,iBAAiB,EAAE;AAAvC;AADd,GAH4B,CAA9B;AAOD;;eAEc5H,O","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  StyleSheet,\n  NativeModules,\n  requireNativeComponent,\n} from 'react-native';\nimport _ from 'underscore';\n\nimport {makePoint, makeLatLngBounds} from '../utils/geoUtils';\nimport {\n  isFunction,\n  isNumber,\n  toJSONString,\n  isAndroid,\n  viewPropTypes,\n} from '../utils';\nimport {getFilter} from '../utils/filterUtils';\n\nimport NativeBridgeComponent from './NativeBridgeComponent';\n\nconst MapboxGL = NativeModules.MGLModule;\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLMapView';\n\nexport const ANDROID_TEXTURE_NATIVE_MODULE_NAME = 'RCTMGLAndroidTextureMapView';\n\nconst styles = StyleSheet.create({\n  matchParent: {flex: 1},\n});\n\n/**\n * MapView backed by Mapbox Native GL\n */\nclass MapView extends NativeBridgeComponent(React.Component) {\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * The distance from the edges of the map view’s frame to the edges of the map view’s logical viewport.\n     */\n    contentInset: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.number),\n      PropTypes.number,\n    ]),\n\n    /**\n     * Style for wrapping React Native View\n     */\n    style: PropTypes.any,\n\n    /**\n     * Style URL for map\n     */\n    styleURL: PropTypes.string,\n\n    /**\n     * iOS: The preferred frame rate at which the map view is rendered.\n     * The default value for this property is MGLMapViewPreferredFramesPerSecondDefault,\n     * which will adaptively set the preferred frame rate based on the capability of\n     * the user’s device to maintain a smooth experience. This property can be set to arbitrary integer values.\n     *\n     * Android: The maximum frame rate at which the map view is rendered, but it can't excess the ability of device hardware.\n     * This property can be set to arbitrary integer values.\n     */\n    preferredFramesPerSecond: PropTypes.number,\n\n    /**\n     * Automatically change the language of the map labels to the system’s preferred language,\n     * this is not something that can be toggled on/off\n     */\n    localizeLabels: PropTypes.bool,\n\n    /**\n     * Enable/Disable zoom on the map\n     */\n    zoomEnabled: PropTypes.bool,\n\n    /**\n     * Enable/Disable scroll on the map\n     */\n    scrollEnabled: PropTypes.bool,\n\n    /**\n     * Enable/Disable pitch on map\n     */\n    pitchEnabled: PropTypes.bool,\n\n    /**\n     * Enable/Disable rotation on map\n     */\n    rotateEnabled: PropTypes.bool,\n\n    /**\n     * The Mapbox terms of service, which governs the use of Mapbox-hosted vector tiles and styles,\n     * [requires](https://www.mapbox.com/help/how-attribution-works/) these copyright notices to accompany any map that features Mapbox-designed styles, OpenStreetMap data, or other Mapbox data such as satellite or terrain data.\n     * If that applies to this map view, do not hide this view or remove any notices from it.\n     *\n     * You are additionally [required](https://www.mapbox.com/help/how-mobile-apps-work/#telemetry) to provide users with the option to disable anonymous usage and location sharing (telemetry).\n     * If this view is hidden, you must implement this setting elsewhere in your app. See our website for [Android](https://www.mapbox.com/android-docs/map-sdk/overview/#telemetry-opt-out) and [iOS](https://www.mapbox.com/ios-sdk/#telemetry_opt_out) for implementation details.\n     *\n     * Enable/Disable attribution on map. For iOS you need to add MGLMapboxMetricsEnabledSettingShownInApp=YES\n     * to your Info.plist\n     */\n    attributionEnabled: PropTypes.bool,\n\n    /**\n     * Adds attribution offset, e.g. `{top: 8, left: 8}` will put attribution button in top-left corner of the map\n     */\n    attributionPosition: PropTypes.oneOfType([\n      PropTypes.shape({top: PropTypes.number, left: PropTypes.number}),\n      PropTypes.shape({top: PropTypes.number, right: PropTypes.number}),\n      PropTypes.shape({bottom: PropTypes.number, left: PropTypes.number}),\n      PropTypes.shape({bottom: PropTypes.number, right: PropTypes.number}),\n    ]),\n\n    /**\n     * Enable/Disable the logo on the map.\n     */\n    logoEnabled: PropTypes.bool,\n\n    /**\n     * Enable/Disable the compass from appearing on the map\n     */\n    compassEnabled: PropTypes.bool,\n\n    /**\n     * Change corner of map the compass starts at. (iOS only) 0: TopLeft, 1: TopRight, 2: BottomLeft, 3: BottomRight\n     */\n    compassViewPosition: PropTypes.number,\n\n    /**\n     * Add margins to the compass with x and y values\n     */\n    compassViewMargins: PropTypes.object,\n\n    /**\n     * [Android only] Enable/Disable use of GLSurfaceView insted of TextureView.\n     */\n    surfaceView: PropTypes.bool,\n\n    /**\n     * Map press listener, gets called when a user presses the map\n     */\n    onPress: PropTypes.func,\n\n    /**\n     * Map long press listener, gets called when a user long presses the map\n     */\n    onLongPress: PropTypes.func,\n\n    /**\n     * This event is triggered whenever the currently displayed map region is about to change.\n     *\n     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds\n     */\n    onRegionWillChange: PropTypes.func,\n\n    /**\n     * This event is triggered whenever the currently displayed map region is changing.\n     *\n     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds\n     */\n    onRegionIsChanging: PropTypes.func,\n\n    /**\n     * This event is triggered whenever the currently displayed map region finished changing\n     *\n     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds\n     */\n    onRegionDidChange: PropTypes.func,\n\n    /**\n     * This event is triggered when the map is about to start loading a new map style.\n     */\n    onWillStartLoadingMap: PropTypes.func,\n\n    /**\n     * This is triggered when the map has successfully loaded a new map style.\n     */\n    onDidFinishLoadingMap: PropTypes.func,\n\n    /**\n     * This event is triggered when the map has failed to load a new map style.\n     */\n    onDidFailLoadingMap: PropTypes.func,\n\n    /**\n     * This event is triggered when the map will start rendering a frame.\n     */\n    onWillStartRenderingFrame: PropTypes.func,\n\n    /**\n     * This event is triggered when the map finished rendering a frame.\n     */\n    onDidFinishRenderingFrame: PropTypes.func,\n\n    /**\n     * This event is triggered when the map fully finished rendering a frame.\n     */\n    onDidFinishRenderingFrameFully: PropTypes.func,\n\n    /**\n     * This event is triggered when the map will start rendering the map.\n     */\n    onWillStartRenderingMap: PropTypes.func,\n\n    /**\n     * This event is triggered when the map finished rendering the map.\n     */\n    onDidFinishRenderingMap: PropTypes.func,\n\n    /**\n     * This event is triggered when the map fully finished rendering the map.\n     */\n    onDidFinishRenderingMapFully: PropTypes.func,\n\n    /**\n     * This event is triggered when the user location is updated.\n     */\n    onUserLocationUpdate: PropTypes.func,\n\n    /**\n     * This event is triggered when a style has finished loading.\n     */\n    onDidFinishLoadingStyle: PropTypes.func,\n\n    /**\n     * The emitted frequency of regionwillchange events\n     */\n    regionWillChangeDebounceTime: PropTypes.number,\n\n    /**\n     * The emitted frequency of regiondidchange events\n     */\n    regionDidChangeDebounceTime: PropTypes.number,\n  };\n\n  static defaultProps = {\n    localizeLabels: false,\n    scrollEnabled: true,\n    pitchEnabled: true,\n    rotateEnabled: true,\n    attributionEnabled: true,\n    logoEnabled: true,\n    styleURL: MapboxGL.StyleURL.Street,\n    surfaceView: false,\n    regionWillChangeDebounceTime: 10,\n    regionDidChangeDebounceTime: 500,\n  };\n\n  constructor(props) {\n    super(props, NATIVE_MODULE_NAME);\n\n    this.state = {\n      isReady: null,\n      region: null,\n      width: 0,\n      height: 0,\n      isUserInteraction: false,\n    };\n\n    this._onPress = this._onPress.bind(this);\n    this._onLongPress = this._onLongPress.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onLayout = this._onLayout.bind(this);\n\n    // debounced map change methods\n    this._onDebouncedRegionWillChange = _.debounce(\n      this._onRegionWillChange.bind(this),\n      props.regionWillChangeDebounceTime,\n      true,\n    );\n\n    this._onDebouncedRegionDidChange = _.debounce(\n      this._onRegionDidChange.bind(this),\n      props.regionDidChangeDebounceTime,\n    );\n  }\n\n  componentDidMount() {\n    this._setHandledMapChangedEvents(this.props);\n  }\n\n  componentWillUnmount() {\n    this._onDebouncedRegionWillChange.cancel();\n    this._onDebouncedRegionDidChange.cancel();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this._setHandledMapChangedEvents(nextProps);\n  }\n\n  _setHandledMapChangedEvents(props) {\n    if (isAndroid()) {\n      const events = [];\n\n      if (props.onRegionWillChange)\n        events.push(MapboxGL.EventTypes.RegionWillChange);\n      if (props.onRegionIsChanging)\n        events.push(MapboxGL.EventTypes.RegionIsChanging);\n      if (props.onRegionDidChange)\n        events.push(MapboxGL.EventTypes.RegionDidChange);\n      if (props.onUserLocationUpdate)\n        events.push(MapboxGL.EventTypes.UserLocationUpdated);\n      if (props.onWillStartLoadingMap)\n        events.push(MapboxGL.EventTypes.WillStartLoadingMap);\n      if (props.onDidFinishLoadingMap)\n        events.push(MapboxGL.EventTypes.DidFinishLoadingMap);\n      if (props.onDidFailLoadingMap)\n        events.push(MapboxGL.EventTypes.DidFailLoadingMap);\n      if (props.onWillStartRenderingFrame)\n        events.push(MapboxGL.EventTypes.WillStartRenderingFrame);\n      if (props.onDidFinishRenderingFrame)\n        events.push(MapboxGL.EventTypes.DidFinishRenderingFrame);\n      if (props.onDidFinishRenderingFrameFully)\n        events.push(MapboxGL.EventTypes.DidFinishRenderingFrameFully);\n      if (props.onWillStartRenderingMap)\n        events.push(MapboxGL.EventTypes.WillStartRenderingMap);\n      if (props.onDidFinishRenderingMap)\n        events.push(MapboxGL.EventTypes.DidFinishRenderingMap);\n      if (props.onDidFinishRenderingMapFully)\n        events.push(MapboxGL.EventTypes.DidFinishRenderingMapFully);\n      if (props.onDidFinishLoadingStyle)\n        events.push(MapboxGL.EventTypes.DidFinishLoadingStyle);\n\n      this._runNativeCommand(\n        'setHandledMapChangedEvents',\n        this._nativeRef,\n        events,\n      );\n    }\n  }\n\n  /**\n   * Converts a geographic coordinate to a point in the given view’s coordinate system.\n   *\n   * @example\n   * const pointInView = await this._map.getPointInView([-37.817070, 144.949901]);\n   *\n   * @param {Array<Number>} coordinate - A point expressed in the map view's coordinate system.\n   * @return {Array}\n   */\n  async getPointInView(coordinate) {\n    const res = await this._runNativeCommand(\n      'getPointInView',\n      this._nativeRef,\n      [coordinate],\n    );\n    return res.pointInView;\n  }\n\n  /**\n   * Converts a point in the given view’s coordinate system to a geographic coordinate.\n   *\n   * @example\n   * const coordinate = await this._map.getCoordinateFromView([100, 100]);\n   *\n   * @param {Array<Number>} point - A point expressed in the given view’s coordinate system.\n   * @return {Array}\n   */\n  async getCoordinateFromView(point) {\n    const res = await this._runNativeCommand(\n      'getCoordinateFromView',\n      this._nativeRef,\n      [point],\n    );\n    return res.coordinateFromView;\n  }\n\n  /**\n   * The coordinate bounds(ne, sw) visible in the users’s viewport.\n   *\n   * @example\n   * const visibleBounds = await this._map.getVisibleBounds();\n   *\n   * @return {Array}\n   */\n  async getVisibleBounds() {\n    const res = await this._runNativeCommand(\n      'getVisibleBounds',\n      this._nativeRef,\n    );\n    return res.visibleBounds;\n  }\n\n  /**\n   * Returns an array of rendered map features that intersect with a given point.\n   *\n   * @example\n   * this._map.queryRenderedFeaturesAtPoint([30, 40], ['==', 'type', 'Point'], ['id1', 'id2'])\n   *\n   * @param  {Array<Number>} coordinate - A point expressed in the map view’s coordinate system.\n   * @param  {Array=} filter - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.\n   * @param  {Array=} layerIDs - A array of layer id's to filter the features by\n   * @return {FeatureCollection}\n   */\n  async queryRenderedFeaturesAtPoint(coordinate, filter = [], layerIDs = []) {\n    if (!coordinate || coordinate.length < 2) {\n      throw new Error('Must pass in valid coordinate[lng, lat]');\n    }\n\n    const res = await this._runNativeCommand(\n      'queryRenderedFeaturesAtPoint',\n      this._nativeRef,\n      [coordinate, getFilter(filter), layerIDs],\n    );\n\n    if (isAndroid()) {\n      return JSON.parse(res.data);\n    }\n\n    return res.data;\n  }\n\n  /**\n   * Returns an array of rendered map features that intersect with the given rectangle,\n   * restricted to the given style layers and filtered by the given predicate.\n   *\n   * @example\n   * this._map.queryRenderedFeaturesInRect([30, 40, 20, 10], ['==', 'type', 'Point'], ['id1', 'id2'])\n   *\n   * @param  {Array<Number>} bbox - A rectangle expressed in the map view’s coordinate system.\n   * @param  {Array=} filter - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.\n   * @param  {Array=} layerIDs -  A array of layer id's to filter the features by\n   * @return {FeatureCollection}\n   */\n  async queryRenderedFeaturesInRect(bbox, filter = [], layerIDs = []) {\n    if (!bbox || bbox.length !== 4) {\n      throw new Error(\n        'Must pass in a valid bounding box[top, right, bottom, left]',\n      );\n    }\n    const res = await this._runNativeCommand(\n      'queryRenderedFeaturesInRect',\n      this._nativeRef,\n      [bbox, getFilter(filter), layerIDs],\n    );\n\n    if (isAndroid()) {\n      return JSON.parse(res.data);\n    }\n\n    return res.data;\n  }\n\n  /**\n   * Map camera will perform updates based on provided config. Deprecated use Camera#setCamera.\n   */\n  setCamera() {\n    console.warn(\n      'MapView.setCamera is deprecated - please use Camera#setCamera',\n    );\n  }\n\n  /**\n   * Takes snapshot of map with current tiles and returns a URI to the image\n   * @param  {Boolean} writeToDisk If true will create a temp file, otherwise it is in base64\n   * @return {String}\n   */\n  async takeSnap(writeToDisk = false) {\n    const res = await this._runNativeCommand('takeSnap', this._nativeRef, [\n      writeToDisk,\n    ]);\n    return res.uri;\n  }\n\n  /**\n   * Returns the current zoom of the map view.\n   *\n   * @example\n   * const zoom = await this._map.getZoom();\n   *\n   * @return {Number}\n   */\n\n  async getZoom() {\n    const res = await this._runNativeCommand('getZoom', this._nativeRef);\n    return res.zoom;\n  }\n\n  /**\n   * Returns the map's geographical centerpoint\n   *\n   * @example\n   * const center = await this._map.getCenter();\n   *\n   * @return {Array<Number>} Coordinates\n   */\n  async getCenter() {\n    const res = await this._runNativeCommand('getCenter', this._nativeRef);\n    return res.center;\n  }\n\n  /**\n   * Sets the visibility of all the layers referencing the specified `sourceLayerId` and/or `sourceId`\n   *\n   * @example\n   * await this._map.setSourceVisibility(false, 'composite', 'building')\n   *\n   * @param {boolean} visible - Visibility of the layers\n   * @param {String} sourceId - Identifier of the target source (e.g. 'composite')\n   * @param {String=} sourceLayerId - Identifier of the target source-layer (e.g. 'building')\n   */\n  setSourceVisibility(visible, sourceId, sourceLayerId = undefined) {\n    this._runNativeCommand('setSourceVisibility', this._nativeRef, [\n      visible,\n      sourceId,\n      sourceLayerId,\n    ]);\n  }\n\n  /**\n   * Show the attribution and telemetry action sheet.\n   * If you implement a custom attribution button, you should add this action to the button.\n   */\n  showAttribution() {\n    return this._runNativeCommand('showAttribution', this._nativeRef);\n  }\n\n  _createStopConfig(config = {}) {\n    const stopConfig = {\n      mode: isNumber(config.mode) ? config.mode : MapboxGL.CameraModes.Ease,\n      pitch: config.pitch,\n      heading: config.heading,\n      duration: config.duration || 2000,\n      zoom: config.zoom,\n    };\n\n    if (config.centerCoordinate) {\n      stopConfig.centerCoordinate = toJSONString(\n        makePoint(config.centerCoordinate),\n      );\n    }\n\n    if (config.bounds && config.bounds.ne && config.bounds.sw) {\n      const {\n        ne,\n        sw,\n        paddingLeft,\n        paddingRight,\n        paddingTop,\n        paddingBottom,\n      } = config.bounds;\n      stopConfig.bounds = toJSONString(makeLatLngBounds(ne, sw));\n      stopConfig.boundsPaddingTop = paddingTop || 0;\n      stopConfig.boundsPaddingRight = paddingRight || 0;\n      stopConfig.boundsPaddingBottom = paddingBottom || 0;\n      stopConfig.boundsPaddingLeft = paddingLeft || 0;\n    }\n\n    return stopConfig;\n  }\n\n  _onPress(e) {\n    if (isFunction(this.props.onPress)) {\n      this.props.onPress(e.nativeEvent.payload);\n    }\n  }\n\n  _onLongPress(e) {\n    if (isFunction(this.props.onLongPress)) {\n      this.props.onLongPress(e.nativeEvent.payload);\n    }\n  }\n\n  _onRegionWillChange(payload) {\n    if (isFunction(this.props.onRegionWillChange)) {\n      this.props.onRegionWillChange(payload);\n    }\n    this.setState({isUserInteraction: payload.properties.isUserInteraction});\n  }\n\n  _onRegionDidChange(payload) {\n    if (isFunction(this.props.onRegionDidChange)) {\n      this.props.onRegionDidChange(payload);\n    }\n    this.setState({region: payload});\n  }\n\n  _onChange(e) {\n    const {\n      regionWillChangeDebounceTime,\n      regionDidChangeDebounceTime,\n    } = this.props;\n    const {type, payload} = e.nativeEvent;\n    let propName = '';\n\n    switch (type) {\n      case MapboxGL.EventTypes.RegionWillChange:\n        if (regionWillChangeDebounceTime > 0) {\n          this._onDebouncedRegionWillChange(payload);\n        } else {\n          propName = 'onRegionWillChange';\n        }\n        break;\n      case MapboxGL.EventTypes.RegionIsChanging:\n        propName = 'onRegionIsChanging';\n        break;\n      case MapboxGL.EventTypes.RegionDidChange:\n        if (regionDidChangeDebounceTime > 0) {\n          this._onDebouncedRegionDidChange(payload);\n        } else {\n          propName = 'onRegionDidChange';\n        }\n        break;\n      case MapboxGL.EventTypes.UserLocationUpdated:\n        propName = 'onUserLocationUpdate';\n        break;\n      case MapboxGL.EventTypes.WillStartLoadingMap:\n        propName = 'onWillStartLoadingMap';\n        break;\n      case MapboxGL.EventTypes.DidFinishLoadingMap:\n        propName = 'onDidFinishLoadingMap';\n        break;\n      case MapboxGL.EventTypes.DidFailLoadingMap:\n        propName = 'onDidFailLoadingMap';\n        break;\n      case MapboxGL.EventTypes.WillStartRenderingFrame:\n        propName = 'onWillStartRenderingFrame';\n        break;\n      case MapboxGL.EventTypes.DidFinishRenderingFrame:\n        propName = 'onDidFinishRenderingFrame';\n        break;\n      case MapboxGL.EventTypes.DidFinishRenderingFrameFully:\n        propName = 'onDidFinishRenderingFrameFully';\n        break;\n      case MapboxGL.EventTypes.WillStartRenderingMap:\n        propName = 'onWillStartRenderingMap';\n        break;\n      case MapboxGL.EventTypes.DidFinishRenderingMap:\n        propName = 'onDidFinishRenderingMap';\n        break;\n      case MapboxGL.EventTypes.DidFinishRenderingMapFully:\n        propName = 'onDidFinishRenderingMapFully';\n        break;\n      case MapboxGL.EventTypes.DidFinishLoadingStyle:\n        propName = 'onDidFinishLoadingStyle';\n        break;\n      default:\n        console.warn('Unhandled event callback type', type);\n    }\n\n    if (propName.length) {\n      this._handleOnChange(propName, payload);\n    }\n  }\n\n  _onLayout(e) {\n    this.setState({\n      isReady: true,\n      width: e.nativeEvent.layout.width,\n      height: e.nativeEvent.layout.height,\n    });\n  }\n\n  _handleOnChange(propName, payload) {\n    if (isFunction(this.props[propName])) {\n      this.props[propName](payload);\n    }\n  }\n\n  _getCenterCoordinate() {\n    if (!this.props.centerCoordinate) {\n      return;\n    }\n    return toJSONString(makePoint(this.props.centerCoordinate));\n  }\n\n  _getVisibleCoordinateBounds() {\n    if (!this.props.visibleCoordinateBounds) {\n      return;\n    }\n    return toJSONString(\n      makeLatLngBounds(\n        this.props.visibleCoordinateBounds[0],\n        this.props.visibleCoordinateBounds[1],\n      ),\n    );\n  }\n\n  _getContentInset() {\n    if (!this.props.contentInset) {\n      return;\n    }\n\n    if (!Array.isArray(this.props.contentInset)) {\n      return [this.props.contentInset];\n    }\n\n    return this.props.contentInset;\n  }\n\n  _setNativeRef(nativeRef) {\n    this._nativeRef = nativeRef;\n    super._runPendingNativeCommands(nativeRef);\n  }\n\n  setNativeProps(props) {\n    if (this._nativeRef) {\n      this._nativeRef.setNativeProps(props);\n    }\n  }\n\n  render() {\n    const props = {\n      ...this.props,\n      contentInset: this._getContentInset(),\n      style: styles.matchParent,\n    };\n\n    const callbacks = {\n      ref: nativeRef => this._setNativeRef(nativeRef),\n      onPress: this._onPress,\n      onLongPress: this._onLongPress,\n      onMapChange: this._onChange,\n      onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined,\n    };\n\n    let mapView = null;\n    if (isAndroid() && !this.props.surfaceView && this.state.isReady) {\n      mapView = (\n        <RCTMGLAndroidTextureMapView {...props} {...callbacks}>\n          {this.props.children}\n        </RCTMGLAndroidTextureMapView>\n      );\n    } else if (this.state.isReady) {\n      mapView = (\n        <RCTMGLMapView {...props} {...callbacks}>\n          {this.props.children}\n        </RCTMGLMapView>\n      );\n    }\n\n    return (\n      <View onLayout={this._onLayout} style={this.props.style}>\n        {mapView}\n      </View>\n    );\n  }\n}\n\nconst RCTMGLMapView = requireNativeComponent(NATIVE_MODULE_NAME, MapView, {\n  nativeOnly: {onMapChange: true, onAndroidCallback: true},\n});\n\nlet RCTMGLAndroidTextureMapView;\nif (isAndroid()) {\n  RCTMGLAndroidTextureMapView = requireNativeComponent(\n    ANDROID_TEXTURE_NATIVE_MODULE_NAME,\n    MapView,\n    {\n      nativeOnly: {onMapChange: true, onAndroidCallback: true},\n    },\n  );\n}\n\nexport default MapView;\n"]},"metadata":{},"sourceType":"script"}
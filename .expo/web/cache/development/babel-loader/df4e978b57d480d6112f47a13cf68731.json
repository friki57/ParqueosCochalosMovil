{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = BottomTabBar;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _BottomTabItem = _interopRequireDefault(require(\"./BottomTabItem\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DEFAULT_TABBAR_HEIGHT = 50;\nvar DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\nvar useNativeDriver = _reactNative.Platform.OS !== 'web';\n\nfunction BottomTabBar(_ref5) {\n  var state = _ref5.state,\n      navigation = _ref5.navigation,\n      descriptors = _ref5.descriptors,\n      activeBackgroundColor = _ref5.activeBackgroundColor,\n      activeTintColor = _ref5.activeTintColor,\n      _ref5$adaptive = _ref5.adaptive,\n      adaptive = _ref5$adaptive === void 0 ? true : _ref5$adaptive,\n      allowFontScaling = _ref5.allowFontScaling,\n      inactiveBackgroundColor = _ref5.inactiveBackgroundColor,\n      inactiveTintColor = _ref5.inactiveTintColor,\n      _ref5$keyboardHidesTa = _ref5.keyboardHidesTabBar,\n      keyboardHidesTabBar = _ref5$keyboardHidesTa === void 0 ? false : _ref5$keyboardHidesTa,\n      labelPosition = _ref5.labelPosition,\n      labelStyle = _ref5.labelStyle,\n      safeAreaInsets = _ref5.safeAreaInsets,\n      showIcon = _ref5.showIcon,\n      showLabel = _ref5.showLabel,\n      style = _ref5.style,\n      tabStyle = _ref5.tabStyle;\n\n  var _ref, _ref2, _ref3, _ref4;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var _React$useState = _react.default.useState(function () {\n    var _Dimensions$get = _reactNative.Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    return {\n      height: height,\n      width: width\n    };\n  }),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  var _React$useState3 = _react.default.useState({\n    height: 0,\n    width: dimensions.width\n  }),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      layout = _React$useState4[0],\n      setLayout = _React$useState4[1];\n\n  var _React$useState5 = _react.default.useState(false),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      keyboardShown = _React$useState6[0],\n      setKeyboardShown = _React$useState6[1];\n\n  var _React$useState7 = _react.default.useState(function () {\n    return new _reactNative.Animated.Value(1);\n  }),\n      _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 1),\n      visible = _React$useState8[0];\n\n  var routes = state.routes;\n\n  _react.default.useEffect(function () {\n    if (keyboardShown) {\n      _reactNative.Animated.timing(visible, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: useNativeDriver\n      }).start();\n    }\n  }, [keyboardShown, visible]);\n\n  _react.default.useEffect(function () {\n    var handleOrientationChange = function handleOrientationChange(_ref6) {\n      var window = _ref6.window;\n      setDimensions(window);\n    };\n\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setKeyboardShown(true);\n    };\n\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return _reactNative.Animated.timing(visible, {\n        toValue: 1,\n        duration: 250,\n        useNativeDriver: useNativeDriver\n      }).start(function (_ref7) {\n        var finished = _ref7.finished;\n\n        if (finished) {\n          setKeyboardShown(false);\n        }\n      });\n    };\n\n    _reactNative.Dimensions.addEventListener('change', handleOrientationChange);\n\n    if (_reactNative.Platform.OS === 'ios') {\n      _reactNative.Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n\n      _reactNative.Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      _reactNative.Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n\n      _reactNative.Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return function () {\n      _reactNative.Dimensions.removeEventListener('change', handleOrientationChange);\n\n      if (_reactNative.Platform.OS === 'ios') {\n        _reactNative.Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n\n        _reactNative.Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        _reactNative.Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n\n        _reactNative.Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, [visible]);\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height: height,\n          width: width\n        };\n      }\n    });\n  };\n\n  var shouldUseHorizontalLabels = function shouldUseHorizontalLabels() {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n      var flattenedStyle = _reactNative.StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      var isLandscape = dimensions.width > dimensions.height;\n      return isLandscape;\n    }\n  };\n\n  var defaultInsets = (0, _reactNativeSafeAreaContext.useSafeArea)();\n  var insets = {\n    top: (_ref = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top) !== null && _ref !== void 0 ? _ref : defaultInsets.top,\n    right: (_ref2 = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _ref2 !== void 0 ? _ref2 : defaultInsets.right,\n    bottom: (_ref3 = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _ref3 !== void 0 ? _ref3 : defaultInsets.bottom,\n    left: (_ref4 = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _ref4 !== void 0 ? _ref4 : defaultInsets.left\n  };\n  return _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.tabBar, {\n      backgroundColor: colors.card,\n      borderTopColor: colors.border\n    }, keyboardHidesTabBar ? {\n      transform: [{\n        translateY: visible.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height, 0]\n        })\n      }],\n      position: keyboardShown ? 'absolute' : null\n    } : null, {\n      height: DEFAULT_TABBAR_HEIGHT + insets.bottom,\n      paddingBottom: insets.bottom,\n      paddingHorizontal: Math.max(insets.left, insets.right)\n    }, style],\n    pointerEvents: keyboardHidesTabBar && keyboardShown ? 'none' : 'auto'\n  }, _react.default.createElement(_reactNative.View, {\n    style: styles.content,\n    onLayout: handleLayout\n  }, routes.map(function (route, index) {\n    var focused = index === state.index;\n    var options = descriptors[route.key].options;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch(_objectSpread({}, _native.CommonActions.navigate(route.name), {\n          target: state.key\n        }));\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' ? \"\".concat(label, \", tab, \").concat(index + 1, \" of \").concat(routes.length) : undefined;\n    return _react.default.createElement(_native.NavigationContext.Provider, {\n      key: route.key,\n      value: descriptors[route.key].navigation\n    }, _react.default.createElement(_native.NavigationRouteContext.Provider, {\n      value: route\n    }, _react.default.createElement(_BottomTabItem.default, {\n      route: route,\n      focused: focused,\n      horizontal: shouldUseHorizontalLabels(),\n      onPress: onPress,\n      onLongPress: onLongPress,\n      accessibilityLabel: accessibilityLabel,\n      testID: options.tabBarTestID,\n      allowFontScaling: allowFontScaling,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      button: options.tabBarButton,\n      icon: options.tabBarIcon,\n      label: label,\n      showIcon: showIcon,\n      showLabel: showLabel,\n      labelStyle: labelStyle,\n      style: tabStyle\n    })));\n  })));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,\n    elevation: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["BottomTabBar.tsx"],"names":["DEFAULT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","Platform","adaptive","keyboardHidesTabBar","tabStyle","colors","height","width","Dimensions","dimensions","React","Animated","routes","toValue","duration","handleOrientationChange","window","setDimensions","handleKeyboardShow","setKeyboardShown","handleKeyboardHide","finished","Keyboard","handleLayout","e","setLayout","layout","shouldUseHorizontalLabels","labelPosition","maxTabItemWidth","flattenedStyle","StyleSheet","isLandscape","defaultInsets","insets","top","safeAreaInsets","right","bottom","left","styles","backgroundColor","borderTopColor","border","transform","translateY","inputRange","outputRange","position","keyboardShown","paddingBottom","paddingHorizontal","Math","focused","index","state","options","descriptors","route","onPress","event","type","target","canPreventDefault","navigation","CommonActions","key","onLongPress","label","accessibilityLabel","tabBar","borderTopWidth","elevation","content","flex","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Keyboard,\n  Platform,\n  LayoutChangeEvent,\n  ScaledSize,\n  Dimensions,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  CommonActions,\n  useTheme,\n} from '@react-navigation/native';\nimport { useSafeArea } from 'react-native-safe-area-context';\n\nimport BottomTabItem from './BottomTabItem';\nimport { BottomTabBarProps } from '../types';\n\ntype Props = BottomTabBarProps & {\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 50;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive = true,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  safeAreaInsets,\n  showIcon,\n  showLabel,\n  style,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n\n  const [dimensions, setDimensions] = React.useState(() => {\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n  const [keyboardShown, setKeyboardShown] = React.useState(false);\n\n  const [visible] = React.useState(() => new Animated.Value(1));\n\n  const { routes } = state;\n\n  React.useEffect(() => {\n    if (keyboardShown) {\n      Animated.timing(visible, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver,\n      }).start();\n    }\n  }, [keyboardShown, visible]);\n\n  React.useEffect(() => {\n    const handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    const handleKeyboardShow = () => setKeyboardShown(true);\n\n    const handleKeyboardHide = () =>\n      Animated.timing(visible, {\n        toValue: 1,\n        duration: 250,\n        useNativeDriver,\n      }).start(({ finished }) => {\n        if (finished) {\n          setKeyboardShown(false);\n        }\n      });\n\n    Dimensions.addEventListener('change', handleOrientationChange);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      Dimensions.removeEventListener('change', handleOrientationChange);\n\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, [visible]);\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const shouldUseHorizontalLabels = () => {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      // Screen size matches a tablet\n      let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n      const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      const isLandscape = dimensions.width > dimensions.height;\n\n      return isLandscape;\n    }\n  };\n\n  const defaultInsets = useSafeArea();\n\n  const insets = {\n    top: safeAreaInsets?.top ?? defaultInsets.top,\n    right: safeAreaInsets?.right ?? defaultInsets.right,\n    bottom: safeAreaInsets?.bottom ?? defaultInsets.bottom,\n    left: safeAreaInsets?.left ?? defaultInsets.left,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor: colors.card,\n          borderTopColor: colors.border,\n        },\n        keyboardHidesTabBar\n          ? {\n              // When the keyboard is shown, slide down the tab bar\n              transform: [\n                {\n                  translateY: visible.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [layout.height, 0],\n                  }),\n                },\n              ],\n              // Absolutely position the tab bar so that the content is below it\n              // This is needed to avoid gap at bottom when the tab bar is hidden\n              position: keyboardShown ? 'absolute' : null,\n            }\n          : null,\n        {\n          height: DEFAULT_TABBAR_HEIGHT + insets.bottom,\n          paddingBottom: insets.bottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        style,\n      ]}\n      pointerEvents={keyboardHidesTabBar && keyboardShown ? 'none' : 'auto'}\n    >\n      <View style={styles.content} onLayout={handleLayout}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate(route.name),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={shouldUseHorizontalLabels()}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={allowFontScaling}\n                  activeTintColor={activeTintColor}\n                  inactiveTintColor={inactiveTintColor}\n                  activeBackgroundColor={activeBackgroundColor}\n                  inactiveBackgroundColor={inactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={options.tabBarIcon}\n                  label={label}\n                  showIcon={showIcon}\n                  showLabel={showLabel}\n                  labelStyle={labelStyle}\n                  style={tabStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.LocationModuleEventEmitter = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar MapboxGL = _reactNative.NativeModules.MGLModule;\nvar MapboxGLLocationManager = _reactNative.NativeModules.MGLLocationModule;\nvar LocationModuleEventEmitter = new _reactNative.NativeEventEmitter(MapboxGLLocationManager);\nexports.LocationModuleEventEmitter = LocationModuleEventEmitter;\n\nvar LocationManager = function () {\n  function LocationManager() {\n    (0, _classCallCheck2.default)(this, LocationManager);\n    this._listeners = [];\n    this._lastKnownLocation = null;\n    this._isListening = false;\n    this.onUpdate = this.onUpdate.bind(this);\n  }\n\n  (0, _createClass2.default)(LocationManager, [{\n    key: \"getLastKnownLocation\",\n    value: function getLastKnownLocation() {\n      var lastKnownLocation;\n      return _regenerator.default.async(function getLastKnownLocation$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (this._lastKnownLocation) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return _regenerator.default.awrap(MapboxGLLocationManager.getLastKnownLocation());\n\n            case 3:\n              lastKnownLocation = _context.sent;\n\n              if (!this._lastKnownLocation && lastKnownLocation) {\n                this._lastKnownLocation = lastKnownLocation;\n              }\n\n            case 5:\n              return _context.abrupt(\"return\", this._lastKnownLocation);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      if (!this._listeners.includes(listener)) {\n        this._listeners.push(listener);\n\n        if (this._lastKnownLocation) {\n          listener(this._lastKnownLocation);\n        }\n      }\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      this._listeners = this._listeners.filter(function (l) {\n        return l !== listener;\n      });\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this._listeners = [];\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var displacement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (!this._isListening) {\n        MapboxGLLocationManager.start(displacement);\n        LocationModuleEventEmitter.addListener(MapboxGL.LocationCallbackName.Update, this.onUpdate);\n        this._isListening = true;\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      MapboxGLLocationManager.stop();\n\n      if (this._isListening) {\n        LocationModuleEventEmitter.removeListener(MapboxGL.LocationCallbackName.Update, this.onUpdate);\n      }\n\n      this._isListening = false;\n    }\n  }, {\n    key: \"setMinDisplacement\",\n    value: function setMinDisplacement(minDisplacement) {\n      MapboxGLLocationManager.setMinDisplacement(minDisplacement);\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(location) {\n      this._lastKnownLocation = location;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(this._listeners), _step; !(_step = _iterator()).done;) {\n        var listener = _step.value;\n        listener(location);\n      }\n    }\n  }]);\n  return LocationManager;\n}();\n\nvar _default = new LocationManager();\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/angelaranibar/Erick/ParqueosCochalosMovil-master/Movil/ParqueosCochalos/node_modules/@react-native-mapbox-gl/maps/javascript/modules/location/locationManager.js"],"names":["MapboxGL","NativeModules","MGLModule","MapboxGLLocationManager","MGLLocationModule","LocationModuleEventEmitter","NativeEventEmitter","LocationManager","_listeners","_lastKnownLocation","_isListening","onUpdate","bind","getLastKnownLocation","lastKnownLocation","listener","includes","push","filter","l","displacement","start","addListener","LocationCallbackName","Update","stop","removeListener","minDisplacement","setMinDisplacement","location"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,2BAAcC,SAA/B;AACA,IAAMC,uBAAuB,GAAGF,2BAAcG,iBAA9C;AAEO,IAAMC,0BAA0B,GAAG,IAAIC,+BAAJ,CACxCH,uBADwC,CAAnC;;;IAIDI,e;AACJ,6BAAc;AAAA;AACZ,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACD;;;;;;;;;;kBAGM,KAAKH,kB;;;;;;gDACwBN,uBAAuB,CAACU,oBAAxB,E;;;AAA1BC,cAAAA,iB;;AACN,kBAAI,CAAC,KAAKL,kBAAN,IAA4BK,iBAAhC,EAAmD;AACjD,qBAAKL,kBAAL,GAA0BK,iBAA1B;AACD;;;+CAEI,KAAKL,kB;;;;;;;;;;;gCAGFM,Q,EAAU;AACpB,UAAI,CAAC,KAAKP,UAAL,CAAgBQ,QAAhB,CAAyBD,QAAzB,CAAL,EAAyC;AACvC,aAAKP,UAAL,CAAgBS,IAAhB,CAAqBF,QAArB;;AAEA,YAAI,KAAKN,kBAAT,EAA6B;AAC3BM,UAAAA,QAAQ,CAAC,KAAKN,kBAAN,CAAR;AACD;AACF;AACF;;;mCAEcM,Q,EAAU;AACvB,WAAKP,UAAL,GAAkB,KAAKA,UAAL,CAAgBU,MAAhB,CAAuB,UAAAC,CAAC;AAAA,eAAIA,CAAC,KAAKJ,QAAV;AAAA,OAAxB,CAAlB;AACD;;;yCAEoB;AACnB,WAAKP,UAAL,GAAkB,EAAlB;AACD;;;4BAEuB;AAAA,UAAlBY,YAAkB,uEAAH,CAAG;;AACtB,UAAI,CAAC,KAAKV,YAAV,EAAwB;AACtBP,QAAAA,uBAAuB,CAACkB,KAAxB,CAA8BD,YAA9B;AAEAf,QAAAA,0BAA0B,CAACiB,WAA3B,CACEtB,QAAQ,CAACuB,oBAAT,CAA8BC,MADhC,EAEE,KAAKb,QAFP;AAKA,aAAKD,YAAL,GAAoB,IAApB;AACD;AACF;;;2BAEM;AACLP,MAAAA,uBAAuB,CAACsB,IAAxB;;AAEA,UAAI,KAAKf,YAAT,EAAuB;AACrBL,QAAAA,0BAA0B,CAACqB,cAA3B,CACE1B,QAAQ,CAACuB,oBAAT,CAA8BC,MADhC,EAEE,KAAKb,QAFP;AAID;;AAED,WAAKD,YAAL,GAAoB,KAApB;AACD;;;uCAEkBiB,e,EAAiB;AAClCxB,MAAAA,uBAAuB,CAACyB,kBAAxB,CAA2CD,eAA3C;AACD;;;6BAEQE,Q,EAAU;AACjB,WAAKpB,kBAAL,GAA0BoB,QAA1B;;AAEA,2DAAuB,KAAKrB,UAA5B,wCAAwC;AAAA,YAA7BO,QAA6B;AACtCA,QAAAA,QAAQ,CAACc,QAAD,CAAR;AACD;AACF;;;;;eAGY,IAAItB,eAAJ,E","sourcesContent":["import {NativeModules, NativeEventEmitter} from 'react-native';\n\nconst MapboxGL = NativeModules.MGLModule;\nconst MapboxGLLocationManager = NativeModules.MGLLocationModule;\n\nexport const LocationModuleEventEmitter = new NativeEventEmitter(\n  MapboxGLLocationManager,\n);\n\nclass LocationManager {\n  constructor() {\n    this._listeners = [];\n    this._lastKnownLocation = null;\n    this._isListening = false;\n    this.onUpdate = this.onUpdate.bind(this);\n  }\n\n  async getLastKnownLocation() {\n    if (!this._lastKnownLocation) {\n      const lastKnownLocation = await MapboxGLLocationManager.getLastKnownLocation();\n      if (!this._lastKnownLocation && lastKnownLocation) {\n        this._lastKnownLocation = lastKnownLocation;\n      }\n    }\n    return this._lastKnownLocation;\n  }\n\n  addListener(listener) {\n    if (!this._listeners.includes(listener)) {\n      this._listeners.push(listener);\n\n      if (this._lastKnownLocation) {\n        listener(this._lastKnownLocation);\n      }\n    }\n  }\n\n  removeListener(listener) {\n    this._listeners = this._listeners.filter(l => l !== listener);\n  }\n\n  removeAllListeners() {\n    this._listeners = [];\n  }\n\n  start(displacement = 0) {\n    if (!this._isListening) {\n      MapboxGLLocationManager.start(displacement);\n\n      LocationModuleEventEmitter.addListener(\n        MapboxGL.LocationCallbackName.Update,\n        this.onUpdate,\n      );\n\n      this._isListening = true;\n    }\n  }\n\n  stop() {\n    MapboxGLLocationManager.stop();\n\n    if (this._isListening) {\n      LocationModuleEventEmitter.removeListener(\n        MapboxGL.LocationCallbackName.Update,\n        this.onUpdate,\n      );\n    }\n\n    this._isListening = false;\n  }\n\n  setMinDisplacement(minDisplacement) {\n    MapboxGLLocationManager.setMinDisplacement(minDisplacement);\n  }\n\n  onUpdate(location) {\n    this._lastKnownLocation = location;\n\n    for (const listener of this._listeners) {\n      listener(location);\n    }\n  }\n}\n\nexport default new LocationManager();\n"]},"metadata":{},"sourceType":"script"}